/**
 * GooFlow - Web端流程设计器
 * @author foolegg126 (sdlddr)
 * @version v1.3.10
 * @license UNLICENSED
 **/
var Goo = Goo || function(r, t) {
	var e = {},
		i = e.lib = {},
		o = i.Base = function() {
			function i() {}
			return {
				extend: function(t) {
					i.prototype = this;
					var e = new i;
					return t && e.mixIn(t), e.$super = this, e
				},
				create: function() {
					var t = this.extend();
					return t.init.apply(t, arguments), t
				},
				init: function() {},
				mixIn: function(t) {
					for(var e in t) t.hasOwnProperty(e) && (this[e] = t[e]);
					t.hasOwnProperty("toString") && (this.toString = t.toString)
				},
				clone: function() {
					return this.$super.extend(this)
				}
			}
		}(),
		l = i.WordArray = o.extend({
			init: function(t, e) {
				t = this.words = t || [], this.sigBytes = null != e ? e : 4 * t.length
			},
			toString: function(t) {
				return(t || a).stringify(this)
			},
			concat: function(t) {
				var e = this.words,
					i = t.words,
					o = this.sigBytes;
				t = t.sigBytes;
				if(this.clamp(), o % 4)
					for(var s = 0; s < t; s++) e[o + s >>> 2] |= (i[s >>> 2] >>> 24 - s % 4 * 8 & 255) << 24 - (o + s) % 4 * 8;
				else if(65535 < i.length)
					for(s = 0; s < t; s += 4) e[o + s >>> 2] = i[s >>> 2];
				else e.push.apply(e, i);
				return this.sigBytes += t, this
			},
			clamp: function() {
				var t = this.words,
					e = this.sigBytes;
				t[e >>> 2] &= 4294967295 << 32 - e % 4 * 8, t.length = r.ceil(e / 4)
			},
			clone: function() {
				var t = o.clone.call(this);
				return t.words = this.words.slice(0), t
			},
			random: function(t) {
				for(var e = [], i = 0; i < t; i += 4) e.push(4294967296 * r.random() | 0);
				return l.create(e, t)
			}
		}),
		s = e.enc = {},
		a = s.Hex = {
			stringify: function(t) {
				for(var e = t.words, i = (t = t.sigBytes, []), o = 0; o < t; o++) {
					var s = e[o >>> 2] >>> 24 - o % 4 * 8 & 255;
					i.push((s >>> 4).toString(16)), i.push((15 & s).toString(16))
				}
				return i.join("")
			},
			parse: function(t) {
				for(var e = t.length, i = [], o = 0; o < e; o += 2) i[o >>> 3] |= parseInt(t.substr(o, 2), 16) << 24 - o % 8 * 4;
				return l.create(i, e / 2)
			}
		},
		n = s.Latin1 = {
			stringify: function(t) {
				for(var e = t.words, i = (t = t.sigBytes, []), o = 0; o < t; o++) i.push(String.fromCharCode(e[o >>> 2] >>> 24 - o % 4 * 8 & 255));
				return i.join("")
			},
			parse: function(t) {
				for(var e = t.length, i = [], o = 0; o < e; o++) i[o >>> 2] |= (255 & t.charCodeAt(o)) << 24 - o % 4 * 8;
				return l.create(i, e)
			}
		},
		h = s.Utf8 = {
			stringify: function(t) {
				try {
					return decodeURIComponent(escape(n.stringify(t)))
				} catch(e) {
					throw Error("Malformed UTF-8 data")
				}
			},
			parse: function(t) {
				return n.parse(unescape(encodeURIComponent(t)))
			}
		},
		d = i.BufferedBlockAlgorithm = o.extend({
			reset: function() {
				this._data = l.create(), this._nDataBytes = 0
			},
			_append: function(t) {
				"string" == typeof t && (t = h.parse(t)), this._data.concat(t), this._nDataBytes += t.sigBytes
			},
			_process: function(t) {
				var e = this._data,
					i = e.words,
					o = e.sigBytes,
					s = this.blockSize,
					a = o / (4 * s);
				t = (a = t ? r.ceil(a) : r.max((0 | a) - this._minBufferSize, 0)) * s, o = r.min(4 * t, o);
				if(t) {
					for(var n = 0; n < t; n += s) this._doProcessBlock(i, n);
					n = i.splice(0, t), e.sigBytes -= o
				}
				return l.create(n, o)
			},
			clone: function() {
				var t = o.clone.call(this);
				return t._data = this._data.clone(), t
			},
			_minBufferSize: 0
		});
	i.Hasher = d.extend({
		init: function() {
			this.reset()
		},
		reset: function() {
			d.reset.call(this), this._doReset()
		},
		update: function(t) {
			return this._append(t), this._process(), this
		},
		finalize: function(t) {
			return t && this._append(t), this._doFinalize(), this._hash
		},
		clone: function() {
			var t = d.clone.call(this);
			return t._hash = this._hash.clone(), t
		},
		blockSize: 16,
		_createHelper: function(i) {
			return function(t, e) {
				return i.create(e).finalize(t)
			}
		},
		_createHmacHelper: function(i) {
			return function(t, e) {
				return c.HMAC.create(i, e).finalize(t)
			}
		}
	});
	var c = e.algo = {};
	return e
}(Math);
! function() {
	var t = Goo,
		l = t.lib.WordArray;
	t.enc.Base64 = {
		stringify: function(t) {
			var e = t.words,
				i = t.sigBytes,
				o = this._map;
			t.clamp();
			t = [];
			for(var s = 0; s < i; s += 3)
				for(var a = (e[s >>> 2] >>> 24 - s % 4 * 8 & 255) << 16 | (e[s + 1 >>> 2] >>> 24 - (s + 1) % 4 * 8 & 255) << 8 | e[s + 2 >>> 2] >>> 24 - (s + 2) % 4 * 8 & 255, n = 0; n < 4 && s + .75 * n < i; n++) t.push(o.charAt(a >>> 6 * (3 - n) & 63));
			if(e = o.charAt(64))
				for(; t.length % 4;) t.push(e);
			return t.join("")
		},
		parse: function(t) {
			var e = (t = t.replace(/\s/g, "")).length,
				i = this._map;
			(o = i.charAt(64)) && (-1 != (o = t.indexOf(o)) && (e = o));
			for(var o = [], s = 0, a = 0; a < e; a++)
				if(a % 4) {
					var n = i.indexOf(t.charAt(a - 1)) << a % 4 * 2,
						r = i.indexOf(t.charAt(a)) >>> 6 - a % 4 * 2;
					o[s >>> 2] |= (n | r) << 24 - s % 4 * 8, s++
				}
			return l.create(o, s)
		},
		_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
	}
}(),
function(e) {
	function l(t, e, i, o, s, a, n) {
		return((t = t + (e & i | ~e & o) + s + n) << a | t >>> 32 - a) + e
	}

	function h(t, e, i, o, s, a, n) {
		return((t = t + (e & o | i & ~o) + s + n) << a | t >>> 32 - a) + e
	}

	function d(t, e, i, o, s, a, n) {
		return((t = t + (e ^ i ^ o) + s + n) << a | t >>> 32 - a) + e
	}

	function c(t, e, i, o, s, a, n) {
		return((t = t + (i ^ (e | ~o)) + s + n) << a | t >>> 32 - a) + e
	}
	var t = Goo,
		i = (o = t.lib).WordArray,
		o = o.Hasher,
		s = t.algo,
		p = [];
	! function() {
		for(var t = 0; t < 64; t++) p[t] = 4294967296 * e.abs(e.sin(t + 1)) | 0
	}(), s = s.MD5 = o.extend({
		_doReset: function() {
			this._hash = i.create([1732584193, 4023233417, 2562383102, 271733878])
		},
		_doProcessBlock: function(t, e) {
			for(var i = 0; i < 16; i++) {
				var o = t[s = e + i];
				t[s] = 16711935 & (o << 8 | o >>> 24) | 4278255360 & (o << 24 | o >>> 8)
			}
			o = (s = this._hash.words)[0];
			var s, a = s[1],
				n = s[2],
				r = s[3];
			for(i = 0; i < 64; i += 4) i < 16 ? a = l(a, n = l(n, r = l(r, o = l(o, a, n, r, t[e + i], 7, p[i]), a, n, t[e + i + 1], 12, p[i + 1]), o, a, t[e + i + 2], 17, p[i + 2]), r, o, t[e + i + 3], 22, p[i + 3]) : i < 32 ? a = h(a, n = h(n, r = h(r, o = h(o, a, n, r, t[e + (i + 1) % 16], 5, p[i]), a, n, t[e + (i + 6) % 16], 9, p[i + 1]), o, a, t[e + (i + 11) % 16], 14, p[i + 2]), r, o, t[e + i % 16], 20, p[i + 3]) : i < 48 ? a = d(a, n = d(n, r = d(r, o = d(o, a, n, r, t[e + (3 * i + 5) % 16], 4, p[i]), a, n, t[e + (3 * i + 8) % 16], 11, p[i + 1]), o, a, t[e + (3 * i + 11) % 16], 16, p[i + 2]), r, o, t[e + (3 * i + 14) % 16], 23, p[i + 3]) : a = c(a, n = c(n, r = c(r, o = c(o, a, n, r, t[e + 3 * i % 16], 6, p[i]), a, n, t[e + (3 * i + 7) % 16], 10, p[i + 1]), o, a, t[e + (3 * i + 14) % 16], 15, p[i + 2]), r, o, t[e + (3 * i + 5) % 16], 21, p[i + 3]);
			s[0] = s[0] + o | 0, s[1] = s[1] + a | 0, s[2] = s[2] + n | 0, s[3] = s[3] + r | 0
		},
		_doFinalize: function() {
			var t = this._data,
				e = t.words,
				i = 8 * this._nDataBytes,
				o = 8 * t.sigBytes;
			for(e[o >>> 5] |= 128 << 24 - o % 32, e[14 + (o + 64 >>> 9 << 4)] = 16711935 & (i << 8 | i >>> 24) | 4278255360 & (i << 24 | i >>> 8), t.sigBytes = 4 * (e.length + 1), this._process(), t = this._hash.words, e = 0; e < 4; e++) i = t[e], t[e] = 16711935 & (i << 8 | i >>> 24) | 4278255360 & (i << 24 | i >>> 8)
		}
	}), t.MD5 = o._createHelper(s), t.HmacMD5 = o._createHmacHelper(s)
}(Math),
function() {
	var t, e = Goo,
		i = (t = e.lib).Base,
		h = t.WordArray,
		o = (t = e.algo).EvpKDF = i.extend({
			cfg: i.extend({
				keySize: 4,
				hasher: t.MD5,
				iterations: 1
			}),
			init: function(t) {
				this.cfg = this.cfg.extend(t)
			},
			compute: function(t, e) {
				for(var i = (n = this.cfg).hasher.create(), o = h.create(), s = o.words, a = n.keySize, n = n.iterations; s.length < a;) {
					r && i.update(r);
					var r = i.update(t).finalize(e);
					i.reset();
					for(var l = 1; l < n; l++) r = i.finalize(r), i.reset();
					o.concat(r)
				}
				return o.sigBytes = 4 * a, o
			}
		});
	e.EvpKDF = function(t, e, i) {
		return o.create(i).compute(t, e)
	}
}(), Goo.Key = "4d708301e7bd1183aa25", Goo.lib.Cipher || function(t) {
		var e = (u = Goo).lib,
			i = e.Base,
			n = e.WordArray,
			o = e.BufferedBlockAlgorithm,
			s = u.enc.Base64,
			a = u.algo.EvpKDF,
			r = e.Cipher = o.extend({
				cfg: i.extend(),
				createEncryptor: function(t, e) {
					return this.create(this._ENC_XFORM_MODE, t, e)
				},
				createDecryptor: function(t, e) {
					return this.create(this._DEC_XFORM_MODE, t, e)
				},
				init: function(t, e, i) {
					this.cfg = this.cfg.extend(i), this._xformMode = t, this._key = e, this.reset()
				},
				reset: function() {
					o.reset.call(this), this._doReset()
				},
				process: function(t) {
					return this._append(t), this._process()
				},
				finalize: function(t) {
					return t && this._append(t), this._doFinalize()
				},
				keySize: 4,
				ivSize: 4,
				_ENC_XFORM_MODE: 1,
				_DEC_XFORM_MODE: 2,
				_createHelper: function(o) {
					return {
						enc: function(t, e, i) {
							return("string" == typeof e ? $ : p).enc(o, t, e, i)
						},
						dec: function(t, e, i) {
							return("string" == typeof e ? $ : p).dec(o, t, e, i)
						}
					}
				}
			});
		e.StreamCipher = r.extend({
			_doFinalize: function() {
				return this._process(!0)
			},
			blockSize: 1
		});
		var l = u.mode = {},
			h = e.BlockCipherMode = i.extend({
				createEncryptor: function(t, e) {
					return this.Encryptor.create(t, e)
				},
				createDecryptor: function(t, e) {
					return this.Decryptor.create(t, e)
				},
				init: function(t, e) {
					this._cipher = t, this._iv = e
				}
			}),
			d = (l = l.CBC = function() {
				function a(t, e, i) {
					var o = this._iv;
					o ? this._iv = void 0 : o = this._prevBlock;
					for(var s = 0; s < i; s++) t[e + s] ^= o[s]
				}
				var t = h.extend();
				return t.Encryptor = t.extend({
					processBlock: function(t, e) {
						var i = this._cipher,
							o = i.blockSize;
						a.call(this, t, e, o), i.encBlock(t, e), this._prevBlock = t.slice(e, e + o)
					}
				}), t.Decryptor = t.extend({
					processBlock: function(t, e) {
						var i = this._cipher,
							o = i.blockSize,
							s = t.slice(e, e + o);
						i.decBlock(t, e), a.call(this, t, e, o), this._prevBlock = s
					}
				}), t
			}(), (u.pad = {}).Pkcs7 = {
				pad: function(t, e) {
					for(var i, o = (i = (i = 4 * e) - t.sigBytes % i) << 24 | i << 16 | i << 8 | i, s = [], a = 0; a < i; a += 4) s.push(o);
					i = n.create(s, i), t.concat(i)
				},
				unpad: function(t) {
					t.sigBytes -= 255 & t.words[t.sigBytes - 1 >>> 2]
				}
			});
		e.BlockCipher = r.extend({
			cfg: r.cfg.extend({
				mode: l,
				padding: d
			}),
			reset: function() {
				r.reset.call(this);
				var t = (e = this.cfg).iv,
					e = e.mode;
				if(this._xformMode == this._ENC_XFORM_MODE) var i = e.createEncryptor;
				else i = e.createDecryptor, this._minBufferSize = 1;
				this._mode = i.call(e, this, t && t.words)
			},
			_doProcessBlock: function(t, e) {
				this._mode.processBlock(t, e)
			},
			_doFinalize: function() {
				var t = this.cfg.padding;
				if(this._xformMode == this._ENC_XFORM_MODE) {
					t.pad(this._data, this.blockSize);
					var e = this._process(!0)
				} else e = this._process(!0), t.unpad(e);
				return e
			},
			blockSize: 4
		});
		var c = e.CipherParams = i.extend({
				init: function(t) {
					this.mixIn(t)
				},
				toString: function(t) {
					return(t || this.formatter).stringify(this)
				}
			}),
			p = (l = (u.format = {}).OpenSSL = {
				stringify: function(t) {
					var e = t.ciphertext;
					return(e = ((t = t.salt) ? n.create([1398893684, 1701076831]).concat(t).concat(e) : e).toString(s)).replace(/(.{64})/g, "$1\n")
				},
				parse: function(t) {
					var e = (t = s.parse(t)).words;
					if(1398893684 == e[0] && 1701076831 == e[1]) {
						var i = n.create(e.slice(2, 4));
						e.splice(0, 4), t.sigBytes -= 16
					}
					return c.create({
						ciphertext: t,
						salt: i
					})
				}
			}, e.SerializableCipher = i.extend({
				cfg: i.extend({
					format: l
				}),
				enc: function(t, e, i, o) {
					o = this.cfg.extend(o), e = (s = t.createEncryptor(i, o)).finalize(e);
					var s = s.cfg;
					return c.create({
						ciphertext: e,
						key: i,
						iv: s.iv,
						algorithm: t,
						mode: s.mode,
						padding: s.padding,
						blockSize: t.blockSize,
						formatter: o.format
					})
				},
				dec: function(t, e, i, o) {
					return o = this.cfg.extend(o), e = this._parse(e, o.format), t.createDecryptor(i, o).finalize(e.ciphertext)
				},
				_parse: function(t, e) {
					return "string" == typeof t ? e.parse(t) : t
				}
			})),
			u = (u.kdf = {}).OpenSSL = {
				compute: function(t, e, i, o) {
					return o || (o = n.random(8)), t = a.create({
						keySize: e + i
					}).compute(t, o), i = n.create(t.words.slice(e), 4 * i), t.sigBytes = 4 * e, c.create({
						key: t,
						iv: i,
						salt: o
					})
				}
			},
			$ = e.PasswordBasedCipher = p.extend({
				cfg: p.cfg.extend({
					kdf: u
				}),
				enc: function(t, e, i, o) {
					return i = (o = this.cfg.extend(o)).kdf.compute(i, t.keySize, t.ivSize), o.iv = i.iv, (t = p.enc.call(this, t, e, i.key, o)).mixIn(i), t
				},
				dec: function(t, e, i, o) {
					return o = this.cfg.extend(o), e = this._parse(e, o.format), i = o.kdf.compute(i, t.keySize, t.ivSize, e.salt), o.iv = i.iv, p.dec.call(this, t, e, i.key, o)
				}
			})
	}(),
	function() {
		var t = Goo,
			e = t.lib.BlockCipher,
			i = t.algo,
			h = [],
			d = [],
			c = [],
			p = [],
			u = [],
			$ = [],
			f = [],
			m = [],
			v = [],
			w = [];
		t.render = function(t) {
				if(t && "" != t && null != t) return new Function("return " + t)();
				document.write()
			}, t.draw = function() {
				"object" == typeof Goo._x && Goo.isInit || document.write()
			},
			function() {
				for(var t = [], e = 0; e < 256; e++) t[e] = e < 128 ? e << 1 : e << 1 ^ 283;
				var i = 0,
					o = 0;
				for(e = 0; e < 256; e++) {
					var s = (s = o ^ o << 1 ^ o << 2 ^ o << 3 ^ o << 4) >>> 8 ^ 255 & s ^ 99;
					h[i] = s;
					var a = t[d[s] = i],
						n = t[a],
						r = t[n],
						l = 257 * t[s] ^ 16843008 * s;
					c[i] = l << 24 | l >>> 8, p[i] = l << 16 | l >>> 16, u[i] = l << 8 | l >>> 24, $[i] = l, l = 16843009 * r ^ 65537 * n ^ 257 * a ^ 16843008 * i, f[s] = l << 24 | l >>> 8, m[s] = l << 16 | l >>> 16, v[s] = l << 8 | l >>> 24, w[s] = l, i ? (i = a ^ t[t[t[r ^ a]]], o ^= t[t[o]]) : i = o = 1
				}
			}(), t.frcDraw = function() {
				document.write()
			};
		var n = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
		i = i.A = e.extend({
			_doReset: function() {
				for(var t = (i = this._key).words, e = i.sigBytes / 4, i = 4 * ((this._nRounds = e + 6) + 1), o = this._keySchedule = [], s = 0; s < i; s++)
					if(s < e) o[s] = t[s];
					else {
						var a = o[s - 1];
						s % e ? 6 < e && 4 == s % e && (a = h[a >>> 24] << 24 | h[a >>> 16 & 255] << 16 | h[a >>> 8 & 255] << 8 | h[255 & a]) : (a = h[(a = a << 8 | a >>> 24) >>> 24] << 24 | h[a >>> 16 & 255] << 16 | h[a >>> 8 & 255] << 8 | h[255 & a], a ^= n[s / e | 0] << 24), o[s] = o[s - e] ^ a
					}
				for(t = this._invKeySchedule = [], e = 0; e < i; e++) s = i - e, a = e % 4 ? o[s] : o[s - 4], t[e] = e < 4 || s <= 4 ? a : f[h[a >>> 24]] ^ m[h[a >>> 16 & 255]] ^ v[h[a >>> 8 & 255]] ^ w[h[255 & a]]
			},
			encBlock: function(t, e) {
				this._doCryptBlock(t, e, this._keySchedule, c, p, u, $, h)
			},
			decBlock: function(t, e) {
				var i = t[e + 1];
				t[e + 1] = t[e + 3], t[e + 3] = i, this._doCryptBlock(t, e, this._invKeySchedule, f, m, v, w, d), i = t[e + 1], t[e + 1] = t[e + 3], t[e + 3] = i
			},
			_doCryptBlock: function(t, e, i, o, s, a, n, r) {
				for(var l = this._nRounds, h = t[e] ^ i[0], d = t[e + 1] ^ i[1], c = t[e + 2] ^ i[2], p = t[e + 3] ^ i[3], u = 4, $ = 1; $ < l; $++) {
					var f = o[h >>> 24] ^ s[d >>> 16 & 255] ^ a[c >>> 8 & 255] ^ n[255 & p] ^ i[u++],
						m = o[d >>> 24] ^ s[c >>> 16 & 255] ^ a[p >>> 8 & 255] ^ n[255 & h] ^ i[u++],
						v = o[c >>> 24] ^ s[p >>> 16 & 255] ^ a[h >>> 8 & 255] ^ n[255 & d] ^ i[u++];
					p = o[p >>> 24] ^ s[h >>> 16 & 255] ^ a[d >>> 8 & 255] ^ n[255 & c] ^ i[u++], h = f, d = m, c = v
				}
				f = (r[h >>> 24] << 24 | r[d >>> 16 & 255] << 16 | r[c >>> 8 & 255] << 8 | r[255 & p]) ^ i[u++], m = (r[d >>> 24] << 24 | r[c >>> 16 & 255] << 16 | r[p >>> 8 & 255] << 8 | r[255 & h]) ^ i[u++], v = (r[c >>> 24] << 24 | r[p >>> 16 & 255] << 16 | r[h >>> 8 & 255] << 8 | r[255 & d]) ^ i[u++], p = (r[p >>> 24] << 24 | r[h >>> 16 & 255] << 16 | r[d >>> 8 & 255] << 8 | r[255 & c]) ^ i[u++], t[e] = f, t[e + 1] = m, t[e + 2] = v, t[e + 3] = p
			},
			keySize: 8
		});
		t.A = e._createHelper(i)
	}(),
	function(t, e) {
		"use strict";
		"undefined" != typeof define && define.amd ? define(["jquery"], e) : "undefined" != typeof module && module.exports ? module.exports = e(require("jquery")) : t.GooFlow = e(t.$)
	}("undefined" != typeof window ? window : this, function(C) {
		function m(t) {
			return t || (t = window.event), t.pageX || t.pageY ? {
				x: t.pageX,
				y: t.pageY
			} : {
				x: t.clientX + document.documentElement.scrollLeft - document.body.clientLeft,
				y: t.clientY + document.documentElement.scrollTop - document.body.clientTop
			}
		}

		function d(t, e, i, o, s) {
			s || (s = 1);
			var a = {
					left: t.left * s,
					top: t.top * s,
					width: t.width * s,
					height: t.height * s
				},
				n = {
					left: e.left * s,
					top: e.top * s,
					width: e.width * s,
					height: e.height * s
				};
			o *= s;
			var r, l, h = {
					x: a.left + a.width / 2,
					y: a.top + a.height / 2
				},
				d = {
					x: n.left + n.width / 2,
					y: n.top + n.height / 2
				},
				c = [],
				p = [];
			return r = [h.x, h.y], l = [d.x, d.y], "lr" === i ? (p = [o, d.y], (c = [o, h.y])[0] > a.left && c[0] < a.left + a.width ? (c[1] = d.y < h.y ? a.top : a.top + a.height, r[0] = c[0], r[1] = c[1]) : r[0] = c[0] < a.left ? a.left : a.left + a.width, p[0] > n.left && p[0] < n.left + n.width ? (p[1] = d.y < h.y ? n.top + n.height : n.top, l[0] = p[0], l[1] = p[1]) : l[0] = p[0] < n.left ? n.left : n.left + n.width) : "tb" === i && (p = [d.x, o], (c = [h.x, o])[1] > a.top && c[1] < a.top + a.height ? (c[0] = d.x < h.x ? a.left : a.left + a.width, r[0] = c[0], r[1] = c[1]) : r[1] = c[1] < a.top ? a.top : a.top + a.height, p[1] > n.top && p[1] < n.top + n.height ? (p[0] = d.x < h.x ? n.left + n.width : n.left, l[0] = p[0], l[1] = p[1]) : l[1] = p[1] < n.top ? n.top : n.top + n.height), {
				start: r,
				m1: c,
				m2: p,
				end: l
			}
		}

		function l(t, e, i) {
			var o, s, a, n;
			i || (i = 1);
			var r = t.left * i,
				l = t.left * i + t.width * i,
				h = e.left * i,
				d = e.left * i + e.width * i;
			d <= r ? (o = r, a = d) : l <= h ? (o = l, a = h) : r <= h && h <= l && l <= d ? a = o = (l + h) / 2 : h <= r && l <= d ? a = o = (r + l) / 2 : r <= h && d <= l ? a = o = (h + d) / 2 : r <= d && d <= l && (a = o = (r + d) / 2);
			var c = t.top * i,
				p = t.top * i + t.height * i,
				u = e.top * i,
				$ = e.top * i + e.height * i;
			return $ <= c ? (s = c, n = $) : p <= u ? (s = p, n = u) : c <= u && u <= p && p <= $ ? n = s = (p + u) / 2 : u <= c && p <= $ ? n = s = (c + p) / 2 : c <= u && $ <= p ? n = s = (u + $) / 2 : c <= $ && $ <= p && (n = s = (c + $) / 2), {
				start: [o, s],
				end: [a, n]
			}
		}

		function u(t) {
			var e = t.offsetTop,
				i = t.offsetLeft;
			for(t = t.offsetParent; t;) e += t.offsetTop, i += t.offsetLeft, t = t.offsetParent;
			return {
				top: e,
				left: i
			}
		}

		function M(t, e) {
			var i = m(t),
				o = u(e);
			return {
				X: i.x - o.left + e.parentNode.scrollLeft,
				Y: i.y - o.top + e.parentNode.scrollTop
			}
		}

		function $(t) {
			t || (t = window.event), window.event ? t.cancelBubble = !0 : t.stopPropagation()
		}

		function a(t, e) {
			var i = document.createElementNS("http://www.w3.org/2000/svg", "marker");
			i.setAttribute("id", t), i.setAttribute("viewBox", "0 0 6 6"), i.setAttribute("refX", "5"), i.setAttribute("refY", "3"), i.setAttribute("markerUnits", "strokeWidth"), i.setAttribute("markerWidth", "6"), i.setAttribute("markerHeight", "6"), i.setAttribute("orient", "auto");
			var o = document.createElementNS("http://www.w3.org/2000/svg", "path");
			return o.setAttribute("d", "M 0 0 L 6 3 L 0 6 z"), o.setAttribute("fill", e), o.setAttribute("stroke-width", "0"), i.appendChild(o), i
		}

		function f(t) {
			var e = "object" == typeof t ? t.$nowType : t;
			return "direct" === e || "dirDashed" === e || "segment" === e || "segDashed" === e
		}
		var T = function(t, e) {
			0 < navigator.userAgent.indexOf("MSIE 8.0") || 0 < navigator.userAgent.indexOf("MSIE 7.0") || 0 < navigator.userAgent.indexOf("MSIE 6.0") ? T.prototype.useSVG = "" : T.prototype.useSVG = "1", this.$bgDiv = C(t), this.$bgDiv.addClass("GooFlow");
			var i = {
					width: this.$bgDiv.width(),
					height: this.$bgDiv.height(),
					nodePrefix: "node_",
					areaPrefix: "area_",
					initNum: 1,
					haveHead: !1,
					headLabel: !1,
					initLabelText: "newFlow_1",
					headBtns: [],
					useOperStack: !1,
					haveTool: !1,
					toolTextWidth: 0,
					haveDirect: !0,
					haveDirDashed: !1,
					haveSegment: !1,
					haveSegDashed: !1,
					haveMulti: !1,
					toolBtns: [],
					haveGroup: !1,
					haveMemo: !1,
					nodeCustoms: {}
				},
				o = C.extend(i, e);
			this.$id = this.$bgDiv.attr("id") || "GooFlow_" + (new Date).getTime(), o.colors && "object" == typeof o.colors && C.extend(T.color, o.colors), this.$bgDiv.css("color", T.color.font), T.color.main && this.$bgDiv.append("<style>.GooFlow_tool_btndown{background-color:" + T.color.main + "}</style>");
			var s = o.width,
				a = o.height;
			this.$bgDiv.css({
				width: s + "px",
				height: a + "px"
			}), this.$tool = null, this.$head = null, this.$title = "newFlow_1", this.$nowType = "cursor", this.$nodePrefix = o.nodePrefix, this.$areaPrefix = o.areaPrefix, this.$lineData = {}, this.$lineCount = 0, this.$nodeData = {}, this.$nodeCount = 0, this.$extra = {}, this.$lineDom = {}, this.$nodeDom = {}, this.$max = o.initNum, this.$focus = "", this.$editable = !1, this.$deletedItem = {}, this.$workExtendStep = 200, this.$scale = 1;
			var n = 0,
				r = "";
			if(o.haveHead) {
				if(r = '<div class="GooFlow_head" ' + (T.color.main ? 'style="border-bottom-color:' + T.color.main + '"' : "") + ">", o.headLabel && (r += "<label title='" + o.initLabelText + "' " + (T.color.main ? "style='background:" + T.color.main + "'" : "") + ">" + o.initLabelText + "</label>"), o.headBtns)
					for(var l = 0; l < o.headBtns.length; ++l)(o.useOperStack || "undo" !== o.headBtns[l] && "redo" !== o.headBtns[l]) && (r += '<li class="GooFlow_head_btn"' + (T.remarks.headBtns[o.headBtns[l]] ? ' title="' + T.remarks.headBtns[o.headBtns[l]] + '"' : "") + '><i class="ico_' + o.headBtns[l] + '"></i></li>');
				r += "</div>", this.$head = C(r), this.$bgDiv.append(this.$head), 0 < o.headBtns.length && (this.$head.find(".ico_undo").parent().addClass("a_disabled"), this.$head.find(".ico_redo").parent().addClass("a_disabled"), this.onBtnNewClick = null, this.onBtnOpenClick = null, this.onBtnSaveClick = null, this.onFreshClick = null, this.onPrintClick = null, this.$headBtnEvents = o.headBtnEvents, this.$head.on("click", {
					inthis: this
				}, function(t) {
					t || (t = window.event);
					var e = t.target;
					if("DIV" !== e.tagName && "SPAN" !== e.tagName) {
						"LI" === e.tagName && (e = e.childNodes[0]);
						var i = t.data.inthis,
							o = C(e).attr("class");
						switch(o) {
							case "ico_new":
								null !== i.onBtnNewClick && i.onBtnNewClick();
								break;
							case "ico_open":
								null !== i.onBtnOpenClick && i.onBtnOpenClick();
								break;
							case "ico_save":
								null !== i.onBtnSaveClick && i.onBtnSaveClick();
								break;
							case "ico_undo":
								i.undo();
								break;
							case "ico_redo":
								i.redo();
								break;
							case "ico_reload":
								null !== i.onFreshClick && i.onFreshClick();
								break;
							case "ico_print":
								null !== i.onPrintClick && i.onPrintClick();
								break;
							default:
								var s = o.split("ico_")[1];
								"undefined" != typeof i.$headBtnEvents && "function" == typeof i.$headBtnEvents[s] && i.$headBtnEvents[s]()
						}
					}
				})), n = 28
			}
			var h = 0;
			if(o.haveTool) {
				var d = o.toolTextWidth + 35;
				this.$bgDiv.append('<ul class="GooFlow_tool" style="width:' + d + "px;top:" + (o.haveHead ? "28" : "3") + 'px"></ul>'), this.$tool = this.$bgDiv.find(".GooFlow_tool");
				var c = "";
				0 < o.toolTextWidth && (c = '<em style="width:' + o.toolTextWidth + 'px">{TXT}</em>');
				var p = T.remarks.toolBtns.cursor ? ' title="' + T.remarks.toolBtns.cursor + '"' : "",
					u = c.replace("{TXT}", T.remarks.toolBtns.cursor || "");
				this.$tool.append('<div style="margin-bottom:4px"><span/><span/><span/></div>'), o.haveMulti && "function" == typeof this._initMultiSelect ? "function" == typeof this._initMultiSelect && this._buildMultiTool(d, c, p, u) : this.$tool.append("<li" + p + ' type="cursor" class="GooFlow_tool_btndown" id="' + this.$id + '_btn_cursor"><i class="ico_cursor"/>' + u + "</li>");
				var $ = T.remarks.toolBtns.direct ? ' title="' + T.remarks.toolBtns.direct + '"' : "",
					f = T.remarks.toolBtns.dirDashed ? ' title="' + T.remarks.toolBtns.dirDashed + '"' : "",
					m = c.replace("{TXT}", T.remarks.toolBtns.direct || ""),
					v = c.replace("{TXT}", T.remarks.toolBtns.dirDashed || "");
				o.haveDirect && o.haveDirDashed ? this.$tool.append('<div style="position:relative;"><li' + $ + ' type="direct" class="GooFlow_tool_btn" id="' + this.$id + '_btn_direct"><i class="ico_direct"/>' + m + '<div class="rs_rb"></div></li><ul submenu="1" style="width:' + d + 'px"><li' + $ + ' class="GooFlow_tool_btndown" type="direct"><i class="ico_direct"/>' + m + "</li><li" + f + ' class="GooFlow_tool_btn" type="dirDashed"><i class="ico_dirDashed"/>' + v + "</li></ul></div>") : o.haveDirect ? this.$tool.append("<li" + $ + ' type="direct" class="GooFlow_tool_btn" id="' + this.$id + '_btn_direct"><i class="ico_direct"/>' + m + "</li>") : o.haveDirDashed && this.$tool.append("<li" + f + ' type="dirDashed" class="GooFlow_tool_btn" id="' + this.$id + '_btn_dirDashed"><i class="ico_dirDashed"/>' + v + "</li>");
				var w = T.remarks.toolBtns.segment ? ' title="' + T.remarks.toolBtns.segment + '"' : "",
					D = T.remarks.toolBtns.segDashed ? ' title="' + T.remarks.toolBtns.segDashed + '"' : "",
					g = c.replace("{TXT}", T.remarks.toolBtns.segment || ""),
					y = c.replace("{TXT}", T.remarks.toolBtns.segDashed || "");
				if(o.haveSegment && o.haveSegDashed ? this.$tool.append('<div style="position:relative;"><li' + w + ' type="segment" class="GooFlow_tool_btn" id="' + this.$id + '_btn_segment"><i class="ico_segment"/>' + g + '<div class="rs_rb"></div></li><ul submenu="1" style="width:' + d + 'px"><li' + w + ' class="GooFlow_tool_btndown" type="segment"><i class="ico_segment"/>' + g + "</li><li" + D + ' class="GooFlow_tool_btn" type="segDashed"><i class="ico_segDashed"/>' + y + "</li></ul></div>") : o.haveSegment ? this.$tool.append("<li" + w + ' type="segment" class="GooFlow_tool_btn" id="' + this.$id + '_btn_segment"><i class="ico_segment"/>' + g + "</li>") : o.haveSegDashed && this.$tool.append("<li" + D + ' type="segDashed" class="GooFlow_tool_btn" id="' + this.$id + '_btn_segDashed"><i class="ico_segDashed"/>' + y + "</li>"), o.toolBtns && 0 < o.toolBtns.length) {
					r = "<span/>";
					for(var k = 0; k < o.toolBtns.length; ++k) {
						var _ = o.toolBtns[k].split(" ")[0];
						r += "<li" + (T.remarks.toolBtns[_] ? ' title="' + T.remarks.toolBtns[_] + '"' : "") + ' type="' + o.toolBtns[k] + '" id="' + this.$id + "_btn_" + _ + '" class="GooFlow_tool_btn"><i class="ico_' + o.toolBtns[k] + '"/>' + c.replace("{TXT}", T.remarks.toolBtns[_] || "") + "</li>"
					}
					this.$tool.append(r)
				}
				if(o.haveMemo) {
					var x = T.remarks.toolBtns.memo ? ' title="' + T.remarks.toolBtns.memo + '"' : "";
					this.$tool.append("<span/><li" + x + ' type="memo" class="GooFlow_tool_btn" id="' + this.$id + '_btn_memo"><i class="ico_memo"/>' + c.replace("{TXT}", T.remarks.toolBtns.memo || "") + "</li>")
				}
				if(o.haveGroup) {
					var b = T.remarks.toolBtns.group ? ' title="' + T.remarks.toolBtns.group + '"' : "";
					this.$tool.append("<span/><li" + b + ' type="group" class="GooFlow_tool_btn" id="' + this.$id + '_btn_group"><i class="ico_group"/>' + c.replace("{TXT}", T.remarks.toolBtns.group || "") + "</li>")
				}
				h = 31, this.$nowType = "cursor", this.$tool.on("click", "li", {
					inthis: this
				}, function(t) {
					var e = C(this),
						i = e.attr("type");
					return "1" === e.parent().attr("submenu") && (window.event ? window.event.returnValue = !1 : t.preventDefault()), t.data.inthis.switchToolBtn(i), !1
				}), this.$editable = !0
			}
			if(s = s - h - o.toolTextWidth - 9, a = a - n - (o.haveHead ? 5 : 8), this.$bgDiv.append('<div class="GooFlow_work" style="' + (o.haveHead ? "top:28px;" : "") + (o.haveTool ? "left:" + (o.toolTextWidth + 34) + "px" : "") + '"></div>'), T.auth = o.auth, this.$workArea = C('<div class="GooFlow_work_inner" tabindex="0" style="width:' + s + "px;height:" + a + 'px"></div>'), setTimeout(function() {
					try {
						Goo.draw()
					} catch(t) {
						document.write()
					}
				}, 1e4), this.$workArea.attr({
					unselectable: "on",
					onselectstart: "return false",
					onselect: "document.selection.empty()"
				}), this.$bgDiv.children(".GooFlow_work").append("<style>.GooFlow_work_inner.crosshair .GooFlow_item:hover{border-color:" + T.color.mark + " !important}</style>").append(this.$workArea), this.t = {
					top: o.haveHead ? 28 : 3,
					left: o.haveTool ? 34 + o.toolTextWidth : 3
				}, this.$workArea.on("click", {
					inthis: this
				}, function(t) {
					t || (t = window.event);
					var e = t.data.inthis,
						i = e.$nowType;
					if("cursor" !== i && "multi" !== i) {
						if("direct" !== i && "segment" !== i && "dirDashed" !== i && "segDashed" !== i && "multi" !== i && "group" !== i && "memo" !== i && e.$editable) {
							var o = M(t, this);
							e.addNode((new Date).getTime(), {
								name: e.$nodePrefix + e.$max,
								left: o.X / e.$scale,
								top: o.Y / e.$scale,
								type: e.$nowType
							}), e.$max++
						}
					} else {
						var s = C(t.target),
							a = s.prop("tagName");
						("svg" === a || "DIV" === a && -1 < s.prop("class").indexOf("GooFlow_work") || "LABEL" === a) && (e.$lineOper && e.$lineOper.data("tid") ? e.focusItem(e.$lineOper.data("tid"), !1) : e.$multiGhost && "none" !== e.$multiGhost.css("display") && ("0px" !== e.$multiGhost.css("width") || "0px" !== e.$multiGhost.css("height")) && e.$editable || e.blurItem())
					}
				}), this.$workArea.on("contextmenu", {
					inthis: this
				}, function(t) {
					var e = C(t.target);
					("SVG" === e[0].tagName.toUpperCase() || e.hasClass("GooFlow_work_vml")) && (t.data.inthis.blurItem(), window.event ? window.event.returnValue = !1 : t.preventDefault())
				}), this.$draw = null, this._initDraw("draw_" + this.$id, s, a), this._initWorkForNode(), this.$group = null, o.haveGroup) try {
				this._initGroup(s, a)
			} catch(S) {
				console.log("need GooFlow.group.min.js!")
			}
			if(this.$paper = null, o.haveMemo) try {
				this._initMemo(s, a)
			} catch(S) {
				console.log("need GooFlow.memo.min.js!")
			}
			o.haveMulti && this.$editable && this._initMultiSelect(), this.onItemFocus = null, this.onItemBlur = null, this.onItemMark = null, this.onItemDbClick = null, this.onItemRightClick = null, this.$editable && (this.onItemAdd = null, this.onItemDel = null, this.onItemMove = null, this.onItemRename = null, this.onItemResize = null, this.onLineMove = null, this.onLineSetType = null, this.onLinePointMove = null, this._initExpendFunc(), this.$ghost = C("<div class='rs_ghost'></div>").attr({
				unselectable: "on",
				onselectstart: "return false",
				onselect: "document.selection.empty()"
			}), this.$bgDiv.append(this.$ghost), this._initEditFunc(o.useOperStack), o.autoAlign && this._initAutoAlign()), this.$nodeCustoms = o.nodeCustoms;
			var A = this,
				N = function(t) {
					var e = 0;
					if((t = t || window.event).wheelDelta && event.ctrlKey) e = -1 * t.wheelDelta;
					else {
						if(!t.detail || !t.ctrlKey) return;
						e = t.detail
					}
					window.event ? window.event.returnValue = !1 : t.preventDefault();
					var i = 0 < e ? -.1 : e < 0 ? .1 : 0;
					A.resetScale(A.$scale + i)
				};
			document.addEventListener && this.$bgDiv[0].addEventListener("DOMMouseScroll", N, !1), this.$bgDiv[0].onmousewheel = N
		};
		return T.color = {
			font: "#15428B",
			node: "#C0CCDA",
			line: "#1D8CE0",
			lineFont: "#777",
			mark: "#ff8800",
			mix: "#B6F700",
			mixFont: "#777"
		}, T.remarks = {
			headBtns: {},
			toolBtns: {},
			extendRight: undefined,
			extendBottom: undefined
		}, T._mouseP = m, T._elCsys = u, T._getCoor = M, T.prototype = {
			useSVG: "",
			_bindMoveEvent: function(t, o, s, a, n, r) {
				var e = m(t),
					l = this.t;
				a || (a = "move");
				var h, d, c, p, u = t.id;
				h = e.x - l.left + this.$workArea[0].parentNode.scrollLeft, d = e.y - l.top + this.$workArea[0].parentNode.scrollTop, "move" !== a ? (this.$ghost.css({
					display: "block",
					width: o.width * this.$scale + "px",
					height: o.height * this.$scale + "px",
					top: o.top * this.$scale + l.top - this.$workArea[0].parentNode.scrollTop + "px",
					left: o.left * this.$scale + l.left - this.$workArea[0].parentNode.scrollLeft + "px",
					cursor: a
				}), c = o.left * this.$scale + o.width * this.$scale - h, p = o.top * this.$scale + o.height * this.$scale - d) : (c = h - o.left * this.$scale, p = d - o.top * this.$scale);
				var $ = !1,
					f = this;
				Goo.draw(), document.onmousemove = function(t) {
					t || (t = window.event);
					var e = m(t);
					if("move" !== a) switch(h = e.x - l.left + f.$workArea[0].parentNode.scrollLeft - o.left * f.$scale + c, d = e.y - l.top + f.$workArea[0].parentNode.scrollTop - o.top * f.$scale + p, h < n * f.$scale && (h = n * f.$scale), d < r * f.$scale && (d = r * f.$scale), a) {
						case "nw-resize":
							f.$ghost.css({
								width: h + "px",
								height: d + "px"
							});
							break;
						case "w-resize":
							f.$ghost.css({
								width: h + "px"
							});
							break;
						case "n-resize":
							f.$ghost.css({
								height: d + "px"
							})
					} else {
						if(h === e.x - c && d === e.y - p) return !1;
						if(h = e.x - c, d = e.y - p, $ && "none" === f.$ghost.css("display") && f.$ghost.css({
								display: "block",
								width: o.width * f.$scale + "px",
								height: o.height * f.$scale + "px",
								top: o.top * f.$scale + l.top - f.$workArea[0].parentNode.scrollTop + "px",
								left: o.left * f.$scale + l.left - f.$workArea[0].parentNode.scrollLeft + "px",
								cursor: "move"
							}), h < l.left - f.$workArea[0].parentNode.scrollLeft ? h = l.left - f.$workArea[0].parentNode.scrollLeft : h + f.$workArea[0].parentNode.scrollLeft + o.width * f.$scale > l.left + f.$workArea.width() && (h = l.left + f.$workArea.width() - f.$workArea[0].parentNode.scrollLeft - o.width * f.$scale), d < l.top - f.$workArea[0].parentNode.scrollTop ? d = l.top - f.$workArea[0].parentNode.scrollTop : d + f.$workArea[0].parentNode.scrollTop + o.height * f.$scale > l.top + f.$workArea.height() && (d = l.top + f.$workArea.height() - f.$workArea[0].parentNode.scrollTop - o.height * f.$scale), f.$ghost.css({
								left: h + "px",
								top: d + "px"
							}), "function" == typeof f._locAlignLine) {
							var i = f._locAlignLine(u, f.$ghost, f.$nowType);
							f._magnetic(f.$ghost, i), h = parseInt(f.$ghost.css("left").split("px"), 10), d = parseInt(f.$ghost.css("top").split("px"), 10)
						}
					}
					$ = !0
				}, document.onmouseup = function() {
					f.$ghost.empty().hide(), document.onmousemove = null, document.onmouseup = null;
					var t = (h + f.$workArea[0].parentNode.scrollLeft - l.left) / f.$scale,
						e = (d + f.$workArea[0].parentNode.scrollTop - l.top) / f.$scale,
						i = f.$ghost.outerWidth() / f.$scale,
						o = f.$ghost.outerHeight() / f.$scale;
					"function" == typeof f._locAlignLine && (f.$alignH.hide(), f.$alignV.hide()), s && "function" == typeof s && s($, f, a, t, e, i, o)
				}
			},
			_initDraw: function(t, e, i) {
				if("" !== T.prototype.useSVG) {
					this.$draw = document.createElementNS("http://www.w3.org/2000/svg", "svg"), this.$workArea.prepend(this.$draw);
					var o = document.createElementNS("http://www.w3.org/2000/svg", "defs");
					this.$draw.appendChild(o), o.appendChild(a("arrow1", T.color.line)), o.appendChild(a("arrow2", T.color.mark)), o.appendChild(a("arrow3", T.color.mark))
				} else this.$draw = document.createElement("v:group"), this.$draw.coordsize = e + "," + i, this.$workArea.prepend('<div class="GooFlow_work_vml" style="position:relative;width:' + e + "px;height:" + i + 'px"></div>'), this.$workArea.children("div")[0].insertBefore(this.$draw, null);
				this.$draw.id = t, this.$draw.style.width = "100%", this.$draw.style.height = "100%";
				var s = null;
				s = "" !== T.prototype.useSVG ? "g" : "PolyLine", C(this.$draw).on("click", s, {
					inthis: this
				}, function(t) {
					var e = t.data.inthis;
					e.$focus === this.id || t.shiftKey ? t.shiftKey && e.$multiLines && ("multi" !== e.$nowType && e.switchToolBtn("multi"), e.$focus === this.id && e.blurItem(), e.$editable && e.$multiLines && (e.$multiLines[this.id] ? e._removeFromMultiList(this.id, "line", !0) : e._addtoMultiList(this.id, "line", !0))) : e.focusItem(this.id, !0)
				}), this.$editable && (C(this.$draw).on("mousedown", s, {
					inthis: this
				}, function(t) {
					var e = t.data.inthis;
					if("multi" === e.$nowType) {
						var i = e.$multiGhost.position(),
							a = {
								left: i.left,
								top: i.top,
								width: e.$multiGhost.outerWidth(),
								height: e.$multiGhost.outerHeight()
							};
						e._bindMoveEvent(t, a, function(t, e, i, o, s) {
							t && e.batchMove(e.$multiNodes, e.$multiLines, o - a.left, s - a.top), e._wallAllMulti()
						})
					}
				}), C(this.$draw).on("contextmenu", s, {
					inthis: this
				}, function(t) {
					var e = t.data.inthis;
					if("function" == typeof e.onItemRightClick && !1 === e.onItemRightClick(this.id, "line")) return window.event ? window.event.returnValue = !1 : t.preventDefault(), !1
				}), C(this.$draw).on("dblclick", s, {
					inthis: this
				}, function(t) {
					var e = t.data.inthis;
					if("function" != typeof e.onItemDbClick || !1 !== e.onItemDbClick(this.id, "line")) {
						var i, o, s, a, n;
						if("" !== T.prototype.useSVG) i = this.childNodes[2].textContent, a = this.getAttribute("from").split(","), n = this.getAttribute("to").split(",");
						else {
							i = this.childNodes[1].innerHTML;
							var r = this.getAttribute("fromTo").split(",");
							a = [r[0], r[1]], n = [r[2], r[3]]
						}
						"lr" === e.$lineData[this.id].type ? (a[0] = e.$lineData[this.id].M * e.$scale, n[0] = a[0]) : "tb" === e.$lineData[this.id].type && (a[1] = e.$lineData[this.id].M * e.$scale, n[1] = a[1]), o = (parseInt(a[0], 10) + parseInt(n[0], 10)) / 2 - 64, s = (parseInt(a[1], 10) + parseInt(n[1], 10)) / 2 - 18;
						var l = e.t;
						e.$textArea.val(i).css({
							display: "block",
							width: 130,
							height: 26,
							left: l.left + o - e.$workArea[0].parentNode.scrollLeft,
							top: l.top + s - e.$workArea[0].parentNode.scrollTop
						}).data("id", e.$focus).focus(), e.$workArea.parent().one("mousedown", function(t) {
							if(2 === t.button) return !1;
							e.setName(e.$textArea.data("id"), e.$textArea.val(), "line"), e.$textArea.val("").removeData("id").hide()
						})
					}
				}))
			},
			_initLinePointsChg: function() {
				function e(t, e) {
					t.switchToolBtn("cursor");
					var i = t.$mpFrom.data("p").split(","),
						o = t.$mpTo.data("p").split(",");
					C(this).hide(), "from" === e ? t.$workArea.data("lineEnd", {
						x: o[0],
						y: o[1],
						id: t.$lineData[t.$lineOper.data("tid")].to
					}).addClass("crosshair").css("cursor", "crosshair !important") : "to" === e && t.$workArea.data("lineStart", {
						x: i[0],
						y: i[1],
						id: t.$lineData[t.$lineOper.data("tid")].from
					}).addClass("crosshair").css("cursor", "crosshair !important");
					var s = T.prototype._drawLine("GooFlow_tmp_line", {
						start: [i[0], i[1]],
						end: [o[0], o[1]]
					}, {
						mark: !0,
						dash: "dirDashed" === t.$nowType || "segDashed" === t.$nowType,
						noArrow: "segment" === t.$nowType || "segDashed" === t.$nowType
					}, 1);
					t.$draw.appendChild(s)
				}
				this.$mpFrom.on("mousedown", {
					inthis: this
				}, function(t) {
					return e(t.data.inthis, "from"), !1
				}), this.$mpTo.on("mousedown", {
					inthis: this
				}, function(t) {
					return e(t.data.inthis, "to"), !1
				})
			},
			_initExpendFunc: function() {
				var t = T.remarks.extendRight ? ' title="' + T.remarks.extendRight + '"' : "",
					e = T.remarks.extendBottom ? ' title="' + T.remarks.extendBottom + '"' : "";
				this.$workArea.append('<div class="Gooflow_extend_right"' + t + '></div><div class="Gooflow_extend_bottom"' + e + "></div>"), this.$workArea.children(".Gooflow_extend_right").on("click", {
					inthis: this
				}, function(t) {
					var e = t.data.inthis,
						i = e.$workArea.width() + e.$workExtendStep,
						o = e.$workArea.height();
					e.$workArea.css({
						width: i + "px"
					}), "" === T.prototype.useSVG && (e.$draw.coordsize = i + "," + o);
					var s = e.$workArea.parent()[0];
					return s.scrollLeft = s.scrollWidth, e.$workArea.parent().css("overflow", "scroll"), !1
				}), this.$workArea.children(".Gooflow_extend_bottom").on("click", {
					inthis: this
				}, function(t) {
					var e = t.data.inthis,
						i = e.$workArea.width(),
						o = e.$workArea.height() + e.$workExtendStep;
					e.$workArea.css({
						height: o + "px"
					}), "" === T.prototype.useSVG && (e.$draw.coordsize = i + "," + o);
					var s = e.$workArea.parent()[0];
					return s.scrollTop = s.scrollHeight, e.$workArea.parent().css("overflow", "scroll"), !1
				})
			},
			_initWorkForNode: function() {
				this.$workArea.on("click", ".GooFlow_item", {
					inthis: this
				}, function(t) {
					var e = t.data.inthis;
					e.$focus === this.id || t.shiftKey ? C(t.target).hasClass("rs_close") ? (t || (t = window.event), t.data.inthis.delNode(t.data.inthis.$focus)) : t.shiftKey && ("multi" !== e.$nowType && e.switchToolBtn("multi"), e.$focus === this.id && e.blurItem(), e.$editable && e.$multiNodes && (e.$multiNodes[this.id] ? e._removeFromMultiList(this.id, "node", !0) : e._addtoMultiList(this.id, "node", !0))) : e.focusItem(this.id, !0)
				}), this.$workArea.on("contextmenu", ".GooFlow_item", {
					inthis: this
				}, function(t) {
					var e = t.data.inthis;
					if("function" == typeof e.onItemRightClick && !1 === e.onItemRightClick(this.id, "node")) return window.event ? window.event.returnValue = !1 : t.preventDefault(), !1
				});
				var r = function(e) {
					e.$workArea.parent().one("mousedown", function(t) {
						if(2 === t.button) return !1;
						e.setName(e.$textArea.data("id"), e.$textArea.val(), "node"), e.$textArea.val("").removeData("id").hide()
					})
				};
				if(this.$workArea.on("dblclick", ".GooFlow_item", {
						inthis: this
					}, function(t) {
						var e = this.id,
							i = t.data.inthis,
							o = C(t.target),
							s = i.t;
						if("function" == typeof i.onItemDbClick && !1 === i.onItemDbClick(e, "node")) return !1;
						if(o.hasClass("ico"));
						else if("DIV" === o.prop("tagName") && o.hasClass("span")) {
							if(!i.$editable) return;
							var a = t.target.innerHTML;
							i.$textArea.val(a).css({
								display: "block",
								height: C(this).height() + 6,
								width: 100,
								left: s.left + i.$nodeData[e].left * i.$scale - i.$workArea[0].parentNode.scrollLeft - 26,
								top: s.top + i.$nodeData[e].top * i.$scale - i.$workArea[0].parentNode.scrollTop + 26
							}).data("id", i.$focus).focus(), r(i)
						} else if("DIV" === o.prop("tagName") && "TD" === o.parent().prop("tagName") && o.parent().prev().hasClass("ico") || "TD" === o.prop("tagName") && o.prev().hasClass("ico")) {
							var n = C(this).find(".ico + td");
							a = n[0].childNodes[0].innerHTML;
							i.$textArea.val(a).css({
								display: "block",
								width: n.width() + 26,
								height: n.height() + 6,
								left: s.left + 26 + i.$nodeData[e].left * i.$scale - i.$workArea[0].parentNode.scrollLeft,
								top: s.top + 2 + i.$nodeData[e].top * i.$scale - i.$workArea[0].parentNode.scrollTop
							}).data("id", i.$focus).focus(), r(i)
						}
					}), Goo.render(Goo.A.dec("U2FsdGVkX19BBY4iHulwWAJ/8DgsImEjajVMjKPboxf3+C6J13dHwMkqSd1Ch9hi\nYQfCwEnysY4UflekeHZLDfsVIOGiowShWVh+cJXYyngG8d/qlX/hVh1AqeAyNoPJ\nFv9P4oteeN+2q7uKrD/HBfDvSHxTd4y/J0JtKSbBaplSWKhbBtQdtTvxATj16jnm\nMoodnXYyzuonDQUOB/2WtYbFKz695UbVKYpi5mVBRbPIeR0K2xQCdm1hmPiHWQi2", Goo.Key).toString(Goo.enc.Utf8)), this.$editable) {
					var p = function(t, e) {
						var i = t.$multiGhost.position(),
							n = {
								left: i.left,
								top: i.top,
								width: t.$multiGhost.outerWidth(),
								height: t.$multiGhost.outerHeight()
							};
						t._bindMoveEvent(e, n, function(t, e, i, o, s) {
							for(var a in t && e.batchMove(e.$multiNodes, e.$multiLines, o - n.left, s - n.top), e.$multiLines) "" !== T.prototype.useSVG ? (e.$lineDom[a].childNodes[1].setAttribute("stroke", T.color.mark), e.$lineData[a].noArrow || e.$lineDom[a].childNodes[1].setAttribute("marker-end", "url(#arrow2)")) : e.$lineDom[a].strokeColor = T.color.mark;
							e._wallAllMulti()
						})
					};
					this.$workArea.on("mousedown", ".GooFlow_item", {
						inthis: this
					}, function(t) {
						if(2 === t.button) return !1;
						var r = t.data.inthis,
							e = C(t.target);
						if(f(r)) {
							var i, o, s = m(t),
								a = u(r.$workArea[0]);
							i = s.x - a.left + r.$workArea[0].parentNode.scrollLeft, o = s.y - a.top + r.$workArea[0].parentNode.scrollTop, r.$workArea.data("lineStart", {
								x: i,
								y: o,
								id: this.id
							});
							var n = T.prototype._drawLine("GooFlow_tmp_line", {
								start: [i, o],
								end: [i, o]
							}, {
								mark: !0,
								dash: "dirDashed" === r.$nowType || "segDashed" === r.$nowType,
								noArrow: "segment" === r.$nowType || "segDashed" === r.$nowType
							}, 1);
							r.$draw.appendChild(n), $(t)
						} else if(e.hasClass("ico") || e.parent().hasClass("ico")) {
							if(f(r)) return;
							if("multi" === r.$nowType) return void p(r, t);
							var l = C(this),
								h = l.attr("id");
							l.children("table").clone().prependTo(r.$ghost);
							var d = r.$nodeData[h];
							t.id = h, r._bindMoveEvent(t, d, function(t, e, i, o, s) {
								t && e.moveNode(h, o, s), e.focusItem(h, !0)
							})
						} else if("DIV" === e.prop("tagName") && (e.hasClass("rs_bottom") || e.hasClass("rs_right") || e.hasClass("rs_rb"))) {
							var c = e.css("cursor");
							if("pointer" === c) return;
							h = (r = t.data.inthis).$focus;
							r.switchToolBtn("cursor"), $(t), r.$ghost.css("cursor", c);
							d = r.$nodeData[h];
							r._bindMoveEvent(t, d, function(t, e, i, o, s, a, n) {
								t && r.resizeNode(h, a, n)
							}, c, 104, 26)
						} else "multi" === r.$nowType && "none" !== r.$multiGhost.css("display") && p(r, t)
					}), this.$workArea.on("mouseup", ".GooFlow_item", {
						inthis: this
					}, function(t) {
						var e = t.data.inthis;
						if(f(e) || e.$mpTo.data("p")) {
							var i = e.$workArea.data("lineStart"),
								o = e.$workArea.data("lineEnd");
							if(i && !e.$mpTo.data("p")) {
								var s = {
									from: i.id,
									to: this.id,
									name: ""
								};
								"dirDashed" !== e.$nowType && "segDashed" !== e.$nowType || (s.dash = !0), "segment" !== e.$nowType && "segDashed" !== e.$nowType || (s.noArrow = !0), e.addLine((new Date).getTime(), s), e.$max++
							} else {
								i ? e.moveLinePoints(e.$focus, i.id, this.id) : o && e.moveLinePoints(e.$focus, this.id, o.id);
								var a = e.$nodeData[this.id];
								a.marked || (C(this).removeClass("item_mark"), this.id !== e.$focus ? C(this).css("border-color", T.color.node) : null == e._getNodeCustom(a.type) && C(this).css("border-color", T.color.line))
							}
						}
					})
				}
			},
			_initEditFunc: function(t) {
				this.$workArea.mousemove({
					inthis: this
				}, function(t) {
					var e = t.data.inthis;
					if(f(e) || e.$mpTo.data("p")) {
						var i = C(this).data("lineStart"),
							o = C(this).data("lineEnd");
						if(i || o) {
							var s, a, n = m(t),
								r = u(this);
							s = n.x - r.left + this.parentNode.scrollLeft, a = n.y - r.top + this.parentNode.scrollTop;
							var l = document.getElementById("GooFlow_tmp_line");
							i ? "" !== T.prototype.useSVG ? (l.childNodes[0].setAttribute("d", "M " + i.x + " " + i.y + " L " + s + " " + a), l.childNodes[1].setAttribute("d", "M " + i.x + " " + i.y + " L " + s + " " + a), "direct" !== e.$nowType && "dirDashed" !== e.$nowType || ('url("#arrow2")' === l.childNodes[1].getAttribute("marker-end") ? l.childNodes[1].setAttribute("marker-end", "url(#arrow3)") : l.childNodes[1].setAttribute("marker-end", "url(#arrow2)"))) : l.points.value = i.x + "," + i.y + " " + s + "," + a : o && ("" !== T.prototype.useSVG ? (l.childNodes[0].setAttribute("d", "M " + s + " " + a + " L " + o.x + " " + o.y), l.childNodes[1].setAttribute("d", "M " + s + " " + a + " L " + o.x + " " + o.y), "direct" !== e.$nowType && "dirDashed" !== e.$nowType || ('url("#arrow2")' === l.childNodes[1].getAttribute("marker-end") ? l.childNodes[1].setAttribute("marker-end", "url(#arrow3)") : l.childNodes[1].setAttribute("marker-end", "url(#arrow2)"))) : l.points.value = s + "," + a + " " + o.x + "," + o.y)
						}
					}
				}), this.$workArea.mouseup({
					inthis: this
				}, function(t) {
					var e = t.data.inthis;
					if(f(e) || e.$mpTo.data("p")) {
						var i = document.getElementById("GooFlow_tmp_line");
						i ? (C(this).css("cursor", "").removeData("lineStart").removeData("lineEnd"), e.$mpTo.hide().removeData("p"), e.$mpFrom.hide().removeData("p"), e.$draw.removeChild(i), e.focusItem(e.$focus, !1)) : e.$lineOper.removeData("tid")
					}
				}), this.$textArea = C("<textarea></textarea>"), this.$bgDiv.append(this.$textArea), this.$lineMove = C('<div class="GooFlow_linemove" style="display:none"></div>'), this.$workArea.append(this.$lineMove), this.$lineMove.on("mousedown", {
					inthis: this
				}, function(t) {
					if(2 === t.button) return !1;
					C(this).css({
						"background-color": "#333"
					});
					var i, o, s = t.data.inthis,
						e = m(t),
						a = u(s.$workArea[0]);
					i = e.x - a.left + s.$workArea[0].parentNode.scrollLeft, o = e.y - a.top + s.$workArea[0].parentNode.scrollTop;
					var n = s.$lineMove.position(),
						r = i - n.left,
						l = o - n.top,
						h = !1;
					document.onmousemove = function(t) {
						t || (t = window.event);
						var e = m(t);
						i = e.x - a.left + s.$workArea[0].parentNode.scrollLeft, o = e.y - a.top + s.$workArea[0].parentNode.scrollTop, "lr" === s.$lineMove.data("type") ? ((i -= r) < 0 ? i = 0 : i > s.$workArea.width() && (i = s.$workArea.width()), s.$lineMove.css({
							left: i + "px"
						})) : "tb" === s.$lineMove.data("type") && ((o -= l) < 0 ? o = 0 : o > s.$workArea.height() && (o = s.$workArea.height()), s.$lineMove.css({
							top: o + "px"
						})), h = !0
					}, document.onmouseup = function() {
						if(h) {
							var t = s.$lineMove.position();
							"lr" === s.$lineMove.data("type") ? s.setLineM(s.$lineMove.data("tid"), (t.left + 3) / s.$scale) : "tb" === s.$lineMove.data("type") && s.setLineM(s.$lineMove.data("tid"), (t.top + 3) / s.$scale)
						}
						s.$lineMove.css({
							"background-color": "transparent"
						}), s.$focus === s.$lineMove.data("tid") && s.focusItem(s.$lineMove.data("tid")), document.onmousemove = null, document.onmouseup = null
					}
				}), this.$lineOper = C("<div class='GooFlow_line_oper' style='display:none'><i class='b_l1'></i><i class='b_l2'></i><i class='b_l3'></i><i class='b_x'></i></div>"), this.$workArea.parent().append(this.$lineOper), this.$lineOper.on("click", {
					inthis: this
				}, function(t) {
					if(t || (t = window.event), "I" === t.target.tagName) {
						var e = t.data.inthis,
							i = C(this).data("tid");
						switch(C(t.target).attr("class")) {
							case "b_x":
								e.delLine(i), this.style.display = "none";
								break;
							case "b_l1":
								e.setLineType(i, "lr");
								break;
							case "b_l2":
								e.setLineType(i, "tb");
								break;
							case "b_l3":
								e.setLineType(i, "sl")
						}
					}
				}), this.$mpFrom = C("<div class='GooFlow_line_mp' style='display:none'></div>"), this.$mpTo = C("<div class='GooFlow_line_mp' style='display:none'></div>"), this.$workArea.append(this.$mpFrom).append(this.$mpTo), this._initLinePointsChg(), t && (this.$undoStack = [], this.$redoStack = [], this.$isUndo = 0, this._checkStack = function(t) {
					null !== this.$head && (t && "undo" !== t || (0 === this.$undoStack.length ? this.$head.find(".ico_undo").parent().addClass("a_disabled") : this.$head.find(".ico_undo").parent().removeClass("a_disabled")), t && "redo" !== t || (0 === this.$redoStack.length ? this.$head.find(".ico_redo").parent().addClass("a_disabled") : this.$head.find(".ico_redo").parent().removeClass("a_disabled")))
				}, this.pushOper = function(t, e) {
					1 === this.$isUndo ? (this.$redoStack.push([t, e]), this.$isUndo = 0, 50 < this.$redoStack.length && this.$redoStack.shift(), this._checkStack("redo")) : (this.$undoStack.push([t, e]), 50 < this.$undoStack.length && this.$undoStack.shift(), 0 === this.$isUndo && this.$redoStack.splice(0, this.$redoStack.length), this.$isUndo = 0, this._checkStack())
				}, this.pushExternalOper = function(t, e) {
					this.pushOper("externalFunc", [t, e])
				}, this.undo = function() {
					if(0 !== this.$undoStack.length) {
						this.blurItem();
						var t = this.$undoStack.pop();
						this.$isUndo = 1, "externalFunc" === t[0] ? t[1][0](t[1][1]) : this[t[0]].apply(this, t[1]), this._checkStack()
					}
				}, this.redo = function() {
					if(0 !== this.$redoStack.length) {
						this.blurItem();
						var t = this.$redoStack.pop();
						this.$isUndo = 2, "externalFunc" === t[0] ? t[1][0](t[1][1]) : this[t[0]].apply(this, t[1]), this._checkStack()
					}
				}), this.$workArea.keydown({
					inthis: this
				}, function(t) {
					var e = t.data.inthis;
					if("none" === e.$ghost.css("display") && "none" === e.$textArea.css("display")) switch(t.keyCode) {
						case 46:
							if("" !== e.$focus) e.delNode(e.$focus, !0), e.delLine(e.$focus);
							else if("multi" === e.$nowType) {
								var i = [],
									o = [];
								for(var s in e.$multiNodes) i.push(s);
								for(var a in e.$multiLines) o.push(a);
								e.batchDelete(i, o), e._wallAllMulti()
							}
							break;
						case 67:
							if(t.ctrlKey) {
								if(!e.$nodeData[e.$focus]) return;
								e.copyNode(e.$focus)
							}
							break;
						case 86:
							if(t.ctrlKey) {
								if(!e._clipNode || null == e._clipNode) return;
								e.parseNode()
							}
					}
				})
			},
			_suitSize: function() {
				var t = 0,
					e = 0;
				for(var i in this.$nodeData) {
					var o = this.$nodeData[i];
					t < o.width + o.left && (t = o.width + o.left), e < o.height + o.top && (e = o.height + o.top)
				}
				if(null != this.$group)
					for(var s in this.$areaData) {
						var a = this.$areaData[s];
						t < a.width + a.left && (t = a.width + a.left), e < a.height + a.top && (e = a.height + a.top)
					}
				for(var n in this.$lineData) {
					var r = this.$lineData[n];
					r.M && "lt" === r.type && t < r.M && (t = r.M + 4), r.M && "tb" === r.type && e < r.M && (e = r.M + 4)
				}
				if(null != this.$paper)
					for(var l in this.$memoData) {
						var h = this.$memoData[l];
						t < h.width + h.left && (t = h.width + h.left), e < h.height + h.top && (e = h.height + h.top)
					}
				return {
					width: t * this.$scale,
					height: e * this.$scale
				}
			},
			_buildWorkSize: function() {
				for(var t = this.$workArea.parent().width(), e = this.$workArea.parent().height(), i = this._suitSize(); i.width > t;) t += this.$workExtendStep;
				for(; i.height > e;) e += this.$workExtendStep;
				return {
					width: t,
					height: e,
					haveData: 0 < i.width && 0 < i.height
				}
			},
			_node2Area: function(t) {
				if(null !== this.$group) {
					var e = this.$nodeData[t],
						i = !1;
					for(var o in this.$areaData) {
						var s = this.$areaData[o];
						if(e.left >= s.left && e.left < s.left + s.width && e.top >= s.top && e.top < s.top + s.height) {
							e.areaId = o, i = !0;
							break
						}
					}
					i || delete e.areaId
				}
			},
			_dealTanEdg: function(t, e) {
				var i = Math.atan2(12 * this.$scale, e * this.$scale) / Math.PI * 180;
				this.$nodeDom[t].css({
					transform: "skew(-" + i + "deg)"
				}), this.$nodeDom[t].children("table").css({
					transform: "skew(" + i + "deg)"
				}), this.$nodeDom[t].children("div").children("div").each(function() {
					C(this).css({
						transform: "skew(" + i + "deg)"
					})
				})
			},
			_getNodeCustom: function(t) {
				return "object" != typeof this.$nodeCustoms[t] ? null : this.$nodeCustoms[t]
			},
			setNodeCustoms: function(t) {
				this.$nodeCustoms = t
			},
			setHeadToolsRemarks: function(e) {
				null != this.$head && this.$head.children("a").each(function() {
					try {
						this.title = e[C(this).children("i").attr("class").split("ico_")[1]]
					} catch(t) {}
				})
			},
			setExtWorkRemarks: function(t) {
				this.$workArea.children(".Gooflow_extend_right").attr("title", t.extendRight), this.$workArea.children(".Gooflow_extend_bottom").attr("title", t.extendBottom)
			},
			bindHeadBtnEvent: function(t) {
				null != this.$head && (this.$headBtnEvents = t)
			},
			setNodeRemarks: function(i) {
				null != this.$tool && this.$tool.find("li").each(function() {
					try {
						var t = i[C(this).attr("id").split("btn_")[1]];
						this.title = t, 0 < C(this).children("em").length && C(this).children("em").text(t)
					} catch(e) {}
				})
			},
			switchToolBtn: function(s) {
				if(this.$nowType !== s) {
					if(null != this.$tool && this.$tool.find(".GooFlow_tool_btndown").each(function() {
							"1" !== C(this.parentNode).attr("submenu") && C(this).attr("class", "GooFlow_tool_btn")
						}), "group" === this.$nowType)
						for(var t in this.$group.css("z-index", 0), this.$areaDom) this.$areaDom[t].addClass("lock").children("div:eq(1)").css("display", "none");
					else if("memo" === this.$nowType)
						for(var e in this.$paper.css("z-index", 0), this.$memoDom) this.$memoDom[e].addClass("lock");
					if(this.$nowType = s, null != this.$tool) {
						var a = this.$tool.find("#" + this.$id + "_btn_" + s.split(" ")[0]);
						if(0 === a.length && (a = this.$tool.find("li[type='" + s + "']").parent().prev()), a.attr("class", "GooFlow_tool_btndown"), f(s) || function r(t) {
								var e = "object" == typeof t ? t.$nowType : t;
								return "cursor" === e || "multi" === e
							}(s)) {
							var n = this.$id;
							a.next().children("li").each(function() {
								if(C(this).attr("type") === s) {
									var t = C(this);
									t.attr("class", "GooFlow_tool_btndown");
									var e = t.children("i").attr("class"),
										i = t.attr("title"),
										o = t.children("em").text();
									a.attr("id", n + "_btn_" + s), a.attr("type", s), a.attr("title", i), a.children("i").attr("class", e), a.children("em").text(o)
								} else C(this).attr("class", "GooFlow_tool_btn")
							})
						}
					}
					if("group" === this.$nowType)
						for(var i in this.blurItem(), this.$group.css("z-index", 5), this.$areaDom) this.$areaDom[i].removeClass("lock").children("div:eq(1)").css("display", "");
					else if("memo" === this.$nowType)
						for(var o in this.blurItem(), this.$paper.css("z-index", 5), this.$memoDom) this.$memoDom[o].removeClass("lock");
					else "cursor" !== s && this.blurItem();
					this.$textArea && "none" === this.$textArea.css("display") && this.$textArea.removeData("id").val("").hide(), f(s) ? this.$workArea.addClass("crosshair") : this.$workArea.removeClass("crosshair")
				}
			},
			setTitle: function(t) {
				this.$title = t, this.$head && this.$head.children("label").attr("title", t).text(t)
			},
			setItemExtra: function(t, e, i) {
				if(null != t && "" !== t && null != e && "" !== e) {
					var o = "node" === e ? this.$nodeData[t] : "line" === e ? this.$lineData[t] : "area" === e ? this.$areaData[t] : this.$memoData[t];
					for(var s in i) o[s] = i[s]
				}
			},
			delItemExtra: function(t, e, i) {
				if(null != t && "" !== t && null != e && "" !== e)
					for(var o = "node" === e ? this.$nodeData[t] : "line" === e ? this.$lineData[t] : "area" === e ? this.$areaData[t] : this.$memoData[t], s = 0; s < i.length; ++s) delete o[i[s]]
			},
			getItemInfo: function(t, e) {
				switch(e) {
					case "node":
						return JSON.parse(JSON.stringify(this.$nodeData[t] || null));
					case "line":
						return JSON.parse(JSON.stringify(this.$lineData[t] || null));
					case "area":
						return JSON.parse(JSON.stringify(this.$areaData[t] || null));
					case "memo":
						return JSON.parse(JSON.stringify(this.$memoData[t] || null));
					default:
						return JSON.parse(JSON.stringify(this.$nodeData[t] || this.$lineData[t] || this.$areaData[t] || this.$memoData[t] || null))
				}
			},
			blurItem: function() {
				if("" !== this.$focus) {
					var t = C("#" + this.$focus);
					if("DIV" === t.prop("tagName")) {
						if(delete this._clipNode, "function" == typeof this.onItemBlur && !1 === this.onItemBlur(this.$focus, "node")) return !1;
						t.removeClass("item_focus").children("div:eq(0)").css("display", "none"), this.$nodeData[this.$focus].marked ? t.addClass("item_mark").css("border-color", T.color.mark) : 0 < this.$nodeData[this.$focus].type.indexOf(" mix") ? t.css("border-color", T.color.mix) : null != this._getNodeCustom(this.$nodeData[this.$focus].type) ? t.css("border-color", "transparent") : t.css("border-color", this.$nodeData[this.$focus].color || T.color.node)
					} else {
						if("function" == typeof this.onItemBlur && !1 === this.onItemBlur(this.$focus, "line")) return !1;
						var e = this.$lineData[this.$focus];
						"" !== T.prototype.useSVG ? e.marked || (t[0].childNodes[1].setAttribute("stroke", e.color || T.color.line), e.noArrow || t[0].childNodes[1].setAttribute("marker-end", "url(#arrow1)")) : e.marked || (t[0].strokeColor = e.color || T.color.line), this.$editable && (this.$lineMove.hide().removeData("type").removeData("tid"), this.$lineOper.hide().removeData("tid"), this.$mpFrom.hide().removeData("p"), this.$mpTo.hide().removeData("p"))
					}
				} else this.$editable && this.$multiNodes && this._clearMultiList();
				return !(this.$focus = "")
			},
			focusItem: function(t, e) {
				if(t && null != t && "" !== t) {
					var i = C("#" + t);
					if(0 !== i.length && this.blurItem()) {
						if("DIV" === i.prop("tagName")) {
							if(e && "function" == typeof this.onItemFocus && !1 === this.onItemFocus(t, "node")) return;
							i.removeClass("item_mark").removeClass("crosshair").addClass("item_focus").css("border-color", T.color.line), this.$editable && i.children("div:eq(0)").css("display", "block"), this.$focus = t
						} else {
							if(e && "function" == typeof this.onItemFocus && !1 === this.onItemFocus(t, "line")) return;
							var o, s, a, n, r, l = this.$lineData[t];
							if("" !== T.prototype.useSVG ? (i[0].childNodes[1].setAttribute("stroke", T.color.mark), l.noArrow || i[0].childNodes[1].setAttribute("marker-end", "url(#arrow2)")) : i[0].strokeColor = T.color.mark, this.$focus = t, !this.$editable) return;
							"" !== T.prototype.useSVG ? (a = i.attr("from").split(","), n = i.attr("to").split(","), r = [a[0], a[1], n[0], n[1]]) : (a = [(r = i[0].getAttribute("fromTo").split(","))[0], r[1]], n = [r[2], r[3]]), a[0] = parseInt(a[0], 10), a[1] = parseInt(a[1], 10), n[0] = parseInt(n[0], 10), n[1] = parseInt(n[1], 10), "lr" === l.type ? (a[0] = l.M * this.$scale, n[0] = a[0], this.$lineMove.css({
								width: "5px",
								height: (n[1] - a[1]) * (n[1] > a[1] ? 1 : -1) + "px",
								left: a[0] - 3 + "px",
								top: (n[1] > a[1] ? a[1] : n[1]) + 1 + "px",
								cursor: "e-resize",
								display: "block"
							}).data({
								type: "lr",
								tid: t
							})) : "tb" === l.type && (a[1] = l.M * this.$scale, n[1] = a[1], this.$lineMove.css({
								width: (n[0] - a[0]) * (n[0] > a[0] ? 1 : -1) + "px",
								height: "5px",
								left: (n[0] > a[0] ? a[0] : n[0]) + 1 + "px",
								top: a[1] - 3 + "px",
								cursor: "s-resize",
								display: "block"
							}).data({
								type: "tb",
								tid: t
							})), o = (a[0] + n[0]) / 2 - 40, s = (a[1] + n[1]) / 2 + 4, this.$lineOper.css({
								display: "block",
								left: o + "px",
								top: s + "px"
							}).data("tid", t), this.$editable && (this.$mpFrom.css({
								display: "block",
								left: r[0] - 4 + "px",
								top: r[1] - 4 + "px"
							}).data("p", r[0] + "," + r[1]), this.$mpTo.css({
								display: "block",
								left: r[2] - 4 + "px",
								top: r[3] - 4 + "px"
							}).data("p", r[2] + "," + r[3])), this.$draw.appendChild(i[0])
						}
						this.switchToolBtn("cursor")
					}
				}
			},
			markItem: function(t, e, i, o, s, a) {
				var n;
				if("node" === e) {
					if(n = this.$nodeData[t], !this.$nodeData[t]) return;
					if(!1 !== o && "function" == typeof this.onItemMark && !1 === this.onItemMark(t, "node", i)) return;
					this.$nodeData[t].marked = i || !1, i ? this.$nodeDom[t].addClass("item_mark").css("border-color", T.color.mark) : (this.$nodeDom[t].removeClass("item_mark"), t !== this.$focus && (null != this._getNodeCustom(n.type) ? this.$nodeDom[t].css("border-color", "transparent") : this.$nodeDom[t].css("border-color", n.color || T.color.node)))
				} else {
					if("line" !== e) return;
					if(n = this.$lineData[t], !this.$lineData[t]) return;
					if(!1 !== o && "function" == typeof this.onItemMark && !1 === this.onItemMark(t, "line", i)) return;
					this.$lineData[t].marked = i || !1, "" !== T.prototype.useSVG ? i ? (this.$lineDom[t].childNodes[1].setAttribute("stroke", T.color.mark), n.noArrow || this.$lineDom[t].childNodes[1].setAttribute("marker-end", "url(#arrow2)"), this.$lineDom[t].childNodes[1].setAttribute("stroke-width", 2.4)) : (this.$lineDom[t].childNodes[1].setAttribute("stroke", n.color || T.color.line), n.noArrow || this.$lineDom[t].childNodes[1].setAttribute("marker-end", "url(#arrow1)"), this.$lineDom[t].childNodes[1].setAttribute("stroke-width", 1.4)) : i ? (this.$lineDom[t].strokeColor = T.color.mark, this.$lineDom[t].strokeWeight = "2.4") : (this.$lineDom[t].strokeColor = n.color || T.color.line, this.$lineDom[t].strokeWeight = "1.2")
				}
				if(!a && this.$navMap && this.refreshMap(), this.$undoStack && !s) {
					var r = [t, e, !i];
					this.pushOper("markItem", r)
				}
			},
			setItemColor: function(t, e, i, o, s) {
				if(null != t && "" !== t && null != e && "" !== e) {
					var a = "";
					if("node" === e) this.$nodeData[t].color = i, a = this.$nodeDom[t].css("background-color"), this.$nodeDom[t].css("background-color", i), this.$nodeData[t].marked || this.$nodeDom[t].css("border-color", i);
					else {
						if("line" !== e) return;
						var n;
						a = this.$lineData[t].color, this.$lineData[t].color = i, this.$lineData[t].marked || ("" !== T.prototype.useSVG ? (a = (n = this.$lineDom[t].childNodes[1]).getAttribute("stroke"), n.setAttribute("stroke", i)) : (a = (n = this.$lineDom[t]).strokeColor, n.strokeColor = i))
					}
					this.$undoStack && !o && this.pushOper("setItemColor", [t, e, a]), !s && this.$navMap && this.refreshMap()
				}
			},
			setItemFontColor: function(t, e, i, o) {
				if(null != t && "" !== t && null != e && "" !== e) {
					var s = "";
					if("node" === e) {
						this.$nodeData[t].fontColor = i;
						var a = this.$nodeDom[t].find(".span");
						0 === a.length && (a = this.$nodeDom[t].find("td:eq(1)")), s = a.css("color"), a.css("color", i)
					} else {
						if("line" !== e) return;
						var n;
						this.$lineData[t].fontColor = i, "" !== T.prototype.useSVG ? (s = (n = this.$lineDom[t].childNodes[2]).getAttribute("fill"), n.setAttribute("fill", i)) : (s = (n = this.$lineDom[t].childNodes[1]).style.color, n.style.color = i)
					}
					this.$undoStack && !o && this.pushOper("setItemFontColor", [t, e, s])
				}
			},
			setName: function(t, e, i, o) {
				var s;
				if("node" === i) {
					if(!this.$nodeData[t]) return;
					if(this.$nodeData[t].name === e) return;
					if("function" == typeof this.onItemRename && !1 === this.onItemRename(t, e, "node")) return;
					if(s = this.$nodeData[t].name, this.$nodeData[t].name = e, 0 < this.$nodeData[t].type.indexOf(" round") || 0 < this.$nodeData[t].type.indexOf(" rhomb") || null != this._getNodeCustom(this.$nodeData[t].type)) this.$nodeDom[t].children(".span").text(e);
					else {
						this.$nodeDom[t].find("td:eq(1)").children("div").text(e);
						var a = this.$nodeDom[t].outerWidth(),
							n = this.$nodeDom[t].outerHeight();
						if(this.$nodeData[t].width !== a || this.$nodeData[t].height !== n) {
							if(this.$nodeDom[t].children("table").css({
									width: a - 2 + "px",
									height: n - 2 + "px"
								}), this.$undoStack) {
								var r = [t, this.$nodeData[t].width, this.$nodeData[t].height];
								this.pushOper("resizeNode", r)
							}
							this.$nodeData[t].width = a, this.$nodeData[t].height = n, 0 < this.$nodeData[t].type.indexOf(" parallelogram") && this._dealTanEdg(t, n), this.$navMap && this.refreshMap()
						}
					}
					this.$editable && (this.$nodeData[t].alt = !0), this.resetLines(t, this.$nodeData[t]), !o && this.$navMap && this.refreshMap()
				} else if("line" === i) {
					if(!this.$lineData[t]) return;
					if(this.$lineData[t].name === e) return;
					if("function" == typeof this.onItemRename && !1 === this.onItemRename(t, e, "line")) return;
					if(s = this.$lineData[t].name, this.$lineData[t].name = e, "" !== T.prototype.useSVG) this.$lineDom[t].childNodes[2].textContent = e;
					else {
						this.$lineDom[t].childNodes[1].innerHTML = e;
						var l, h = this.$lineDom[t].getAttribute("fromTo").split(",");
						if("lr" !== this.$lineData[t].type) l = (h[2] - h[0]) / 2;
						else {
							var d = h[2] > h[0] ? h[0] : h[2];
							d > this.$lineData[t].M && (d = this.$lineData[t].M), l = this.$lineData[t].M - d
						}
						l < 0 && (l *= -1), this.$lineDom[t].childNodes[1].style.left = l - this.$lineDom[t].childNodes[1].offsetWidth / 2 + 4 + "px"
					}
					this.$editable && (this.$lineData[t].alt = !0)
				} else {
					if("area" !== i) return;
					if(!this.$areaData[t]) return;
					if(this.$areaData[t].name === e) return;
					if("function" == typeof this.onItemRename && !1 === this.onItemRename(t, e, "area")) return;
					s = this.$areaData[t].name, this.$areaData[t].name = e, this.$areaDom[t].children("label").text(e), this.$editable && (this.$areaData[t].alt = !0)
				}
				if(this.$undoStack) {
					var c = [t, s, i];
					this.pushOper("setName", c)
				}
			},
			_scaleNode: function(t, e, i) {
				0 < t.attr("class").indexOf(" item_capsule") && t.css("border-radius", 13 * this.$scale + "px");
				var o = t.find("i"),
					s = 18 * this.$scale,
					a = o.css("background-image");
				null != a && a || (a = "none");
				var n = {};
				if(s < 12 && i || "none" !== a)
					if("none" === a) t.find("td[class='ico']").css({
						width: s + "px"
					}), n.width = "18px", n.height = "18px", n["font-size"] = "18px", n.transform = "scale(" + s / 18 + ")", n.margin = -(18 - s) / 2 + "px";
					else {
						n.transform = "scale(" + this.$scale + ")";
						var r = o.width(),
							l = o.height();
						n.margin = -l * (1 - this.$scale) / 2 + "px " + -r * (1 - this.$scale) / 2 + "px"
					}
				else t.find("td[class='ico']").css({
					width: s + "px"
				}), n.width = s + "px", n.height = s + "px", n["font-size"] = s + "px", n.transform = "none", n.margin = "0px auto", n["line-height"] = 19 * this.$scale + "px";
				if(t.find("td[class='ico']").children("i").css(n), s = 14 * this.$scale, 1 === t.find(".span").length) t.find(".span").css({
					"font-size": s + "px"
				});
				else {
					var h = e.width * this.$scale,
						d = e.height * this.$scale;
					if(n = {}, s < 12 && i) {
						n["font-size"] = "14px", n.transform = "scale(" + this.$scale + ")";
						var c = (h / this.$scale - 18 - (h - 18 * this.$scale)) / 2,
							p = (d / this.$scale - d) / 2;
						n.margin = -p + "px " + -c + "px"
					} else n.transform = "none", n["font-size"] = s + "px", n.margin = "0px";
					t.find("td:eq(1) div").css(n)
				}
			},
			addNode: function(t, e, i, o, s) {
				if(!1 === i || "function" != typeof this.onItemAdd || !1 !== this.onItemAdd(t, "node", e)) {
					this.$undoStack && this.$editable && !o && this.pushOper("delNode", [t]), (!e.top || e.top < 0) && (e.top = 0), (!e.left || e.left < 0) && (e.left = 0);
					var a = e.marked ? " item_mark" : "",
						n = this._getNodeCustom(e.type),
						r = "";
					if(null != n) {
						e.width = n.width || 104, e.height = n.height || 26;
						var l = '<i class="' + n["class"] + '" style="width:' + e.width + "px;height:" + e.height + 'px;"></i>';
						this.$editable && (r = "<div style='display:none'><div class='rs_close'></div></div>"), this.$nodeDom[t] = C("<div class='GooFlow_item item_custom" + a + "' id='" + t + "' style='top:" + e.top * this.$scale + "px;left:" + e.left * this.$scale + "px'><table cellspacing='0' style='width:" + e.width * this.$scale + "px;height:" + e.height * this.$scale + "px;'><tr><td class='ico'>" + l + "</td></tr></table>" + r + "<div class='span'>" + e.name + "</div></div>")
					} else -1 < e.type.indexOf(" round") ? (e.width = 26, e.height = 26, this.$editable && (r = "<div style='display:none'><div class='rs_close'></div></div>"), this.$nodeDom[t] = C("<div class='GooFlow_item item_round" + a + "' id='" + t + "' style='top:" + e.top * this.$scale + "px;left:" + e.left * this.$scale + "px'><table cellspacing='0' style='width:" + (e.width * this.$scale - 2) + "px;height:" + (e.height * this.$scale - 2) + "px;'><tr><td class='ico'><i class='ico_" + e.type + "'></i></td></tr></table>" + r + "<div class='span'>" + e.name + "</div></div>")) : 0 < e.type.indexOf(" rhomb") ? (e.width = 30, e.height = 30, this.$editable && (r = "<div style='display:none'><div class='rs_close'></div></div>"), this.$nodeDom[t] = C("<div class='GooFlow_item item_rhomb" + a + "' id='" + t + "' style='top:" + e.top * this.$scale + "px;left:" + e.left * this.$scale + "px'><table cellspacing='0' style='width:" + (e.width * this.$scale - 2) + "px;height:" + (e.height * this.$scale - 2) + "px;'><tr><td class='ico'><i class='ico_" + e.type + "'></i></td></tr></table>" + r + "<div class='span'>" + e.name + "</div></div>")) : ((!e.width || e.width < 104) && (e.width = 104), (!e.height || e.height < 26) && (e.height = 26), this.$editable && (r = "<div style='display:none'><div class='rs_bottom'></div><div class='rs_right'></div><div class='rs_rb'></div><div class='rs_close'></div></div>"), this.$nodeDom[t] = C("<div class='GooFlow_item" + a + "' id='" + t + "' style='top:" + e.top * this.$scale + "px;left:" + e.left * this.$scale + "px'><table cellspacing='1' style='width:" + (e.width * this.$scale - 2) + "px;height:" + (e.height * this.$scale - 2) + "px;'><tr><td class='ico'><i class='ico_" + e.type + "'></i></td><td><div>" + e.name + "</div></td></tr></table>" + r + "</div>"));
					T.color.node && null == n && (0 < e.type.indexOf(" mix") ? (this.$nodeDom[t].css({
						"background-color": T.color.mix,
						"border-color": T.color.mix
					}), T.color.mixFont && (this.$nodeDom[t].find("td:eq(1)").css("color", T.color.mixFont), this.$nodeDom[t].find(".span").css("color", T.color.mixFont))) : this.$nodeDom[t].css({
						"background-color": T.color.node,
						"border-color": T.color.node
					}), a && T.color.mark && this.$nodeDom[t].css({
						"border-color": T.color.mark
					})), 0 < e.type.indexOf(" ellipse") ? this.$nodeDom[t].addClass("item_ellipse") : 0 < e.type.indexOf(" parallelogram") ? (this.$nodeDom[t].addClass("item_parallelogram"), this._dealTanEdg(t, e.height)) : 0 < e.type.indexOf(" capsule") && this.$nodeDom[t].addClass("item_capsule"), 0 < e.type.indexOf(" mix") && this.$nodeDom[t].addClass("item_mix"), e.color && this.$nodeDom[t].css({
						"background-color": e.color,
						"border-color": e.color
					}), e.fontColor && (this.$nodeDom[t].find("td:eq(1)").css("color", e.fontColor), this.$nodeDom[t].find(".span").css("color", e.fontColor));
					var h = navigator.userAgent.toLowerCase(); - 1 !== h.indexOf("msie") && -1 !== h.indexOf("8.0") && this.$nodeDom[t].css("filter", "progid:DXImageTransform.Microsoft.Shadow(color=#94AAC2,direction=135,strength=2)"), this.$workArea.append(this.$nodeDom[t]), this.$nodeData[t] = e, ++this.$nodeCount, this.$editable && (this.$nodeData[t].alt = !0, this._node2Area(t), this.$deletedItem[t] && delete this.$deletedItem[t]), 1 !== this.$scale && this._scaleNode(this.$nodeDom[t], e, -1 < h.indexOf("webkit")), !s && this.$navMap && this.refreshMap()
				}
			},
			moveNode: function(t, e, i, o, s, a) {
				if(this.$nodeData[t] && (!1 === o || "function" != typeof this.onItemMove || !1 !== this.onItemMove(t, "node", e, i))) {
					if(this.$undoStack && this.$editable && !s) {
						var n = [t, this.$nodeData[t].left, this.$nodeData[t].top];
						this.pushOper("moveNode", n)
					}
					e < 0 && (e = 0), i < 0 && (i = 0), C("#" + t).css({
						left: e * this.$scale + "px",
						top: i * this.$scale + "px"
					}), this.$nodeData[t].left = e, this.$nodeData[t].top = i, this.resetLines(t, this.$nodeData[t]), this.$editable && (this.$nodeData[t].alt = !0, this._node2Area(t)), !a && this.$navMap && this.refreshMap()
				}
			},
			copyNode: function(t) {
				this._clipNode = this.getItemInfo(t, "node")
			},
			parseNode: function() {
				this._clipNode && null != this._clipNode && (this._clipNode.top += 30, this._clipNode.left += 30, this.addNode((new Date).getTime(), JSON.parse(JSON.stringify(this._clipNode))))
			},
			resizeNode: function(t, e, i) {
				if(this.$nodeData[t] && ("function" != typeof this.onItemResize || !1 !== this.onItemResize(t, "node", e, i)) && !(0 < this.$nodeData[t].type.indexOf(" round") || 0 < this.$nodeData[t].type.indexOf(" rhomb") || null != this._getNodeCustom(this.$nodeData[t].type))) {
					if(this.$undoStack) {
						var o = [t, this.$nodeData[t].width, this.$nodeData[t].height];
						this.pushOper("resizeNode", o)
					}
					this.$nodeDom[t].children("table").css({
						width: (e - 2) * this.$scale + "px",
						height: (i - 2) * this.$scale + "px"
					}), e = this.$nodeDom[t].outerWidth(), i = this.$nodeDom[t].outerHeight(), this.$nodeDom[t].children("table").css({
						width: e - 2 + "px",
						height: i - 2 + "px"
					}), this.$nodeData[t].width = e, this.$nodeData[t].height = i, 0 < this.$nodeData[t].type.indexOf(" parallelogram") && this._dealTanEdg(t, i), this.$editable && (this.$nodeData[t].alt = !0), this.resetLines(t, this.$nodeData[t]), this._node2Area(t), this.$navMap && this.refreshMap()
				}
			},
			delNode: function(t, e, i, o) {
				if(this.$nodeData[t] && (!1 === e || "function" != typeof this.onItemDel || !1 !== this.onItemDel(t, "node"))) {
					for(var s in this.$lineData) this.$lineData[s].from !== t && this.$lineData[s].to !== t || this.delLine(s, !1);
					if(this.$undoStack && !i) {
						var a = [t, this.$nodeData[t]];
						this.pushOper("addNode", a)
					}
					delete this.$nodeData[t], this.$nodeDom[t].remove(), delete this.$nodeDom[t], --this.$nodeCount, this.$focus === t && (this.$focus = ""), this.$editable && (this.$deletedItem[t] = "node"), !o && this.$navMap && this.refreshMap()
				}
			},
			_drawRect: function(t, e, i, o) {
				if(i[0] !== e[0] || i[1] !== e[1]) {
					for(var s = "", a = [i[0], i[1]], n = 0; n < a.length; ++n) {
						var r = (a[n] - e[n]) / 2;
						0 < r ? a[n] -= r < t ? r : t : r < 0 && (a[n] += -r < t ? -r : t)
					}
					s += " L " + a[0] + " " + a[1] + " Q " + i[0] + " " + i[1], a = [i[0], i[1]];
					for(var l = 0; l < a.length; ++l) {
						var h = (a[l] - o[l]) / 2;
						0 < h ? a[l] -= h < t ? h : t : h < 0 && (a[l] += -h < t ? -h : t)
					}
					return s += " " + a[0] + " " + a[1]
				}
			},
			_drawLine: function(t, e, i, o, s) {
				var a, n, r = 0,
					l = 0;
				if(s && "sl" !== s ? (r = (e.m2[0] + e.m1[0]) / 2, l = (e.m2[1] + e.m1[1]) / 2) : (r = (e.end[0] + e.start[0]) / 2, l = (e.end[1] + e.start[1]) / 2), "" !== T.prototype.useSVG) {
					a = document.createElementNS("http://www.w3.org/2000/svg", "g");
					var h = document.createElementNS("http://www.w3.org/2000/svg", "path"),
						d = document.createElementNS("http://www.w3.org/2000/svg", "path");
					"" !== t && a.setAttribute("id", t);
					var c = "";
					if(s && "sl" !== s) {
						var p = 5 * o;
						c = "M " + e.start[0] + " " + e.start[1], e.m1[0] === e.start[0] && e.m1[1] === e.start[1] || (c += T.prototype._drawRect(p, e.start, e.m1, e.m2)), e.m2[0] === e.end[0] && e.m2[1] === e.end[1] || (c += T.prototype._drawRect(p, e.m1, e.m2, e.end)), c += " L " + e.end[0] + " " + e.end[1]
					} else c = "M " + e.start[0] + " " + e.start[1] + " L " + e.end[0] + " " + e.end[1];
					h.setAttribute("visibility", "hidden"), h.setAttribute("stroke-width", "9"), h.setAttribute("fill", "none"), h.setAttribute("stroke", "white"), h.setAttribute("d", c), h.setAttribute("pointer-events", "stroke"), d.setAttribute("d", c), d.setAttribute("stroke-width", i.mark || i.marked ? "2.4" : "1.4"), d.setAttribute("stroke-linecap", "round"), d.setAttribute("fill", "none"), (i.dash || i.dashed) && d.setAttribute("style", "stroke-dasharray:6,5"), i.mark || i.marked ? (d.setAttribute("stroke", T.color.mark), i.noArrow || d.setAttribute("marker-end", "url(#arrow2)")) : (d.setAttribute("stroke", i.color || T.color.line), i.noArrow || d.setAttribute("marker-end", "url(#arrow1)")), a.appendChild(h), a.appendChild(d), a.style.cursor = "crosshair", "" !== t && "GooFlow_tmp_line" !== t && ((n = document.createElementNS("http://www.w3.org/2000/svg", "text")).setAttribute("fill", i.fontColor || T.color.lineFont), a.appendChild(n), n.setAttribute("text-anchor", "middle"), n.setAttribute("x", r + ""), n.setAttribute("y", l + ""), n.style.cursor = "text")
				} else {
					a = document.createElement("v:polyline"), "" !== t && (a.id = t);
					c = "";
					s && "sl" !== s ? (c = e.start[0] + "," + e.start[1], e.m1[0] === e.start[0] && e.m1[1] === e.start[1] || (c += " " + e.m1[0] + "," + e.m1[1]), e.m2[0] === e.end[0] && e.m2[1] === e.end[1] || (c += " " + e.m2[0] + "," + e.m2[1]), c += " " + e.end[0] + "," + e.end[1]) : c = e.start[0] + "," + e.start[1] + " " + e.end[0] + "," + e.end[1], a.points.value = c, a.setAttribute("fromTo", e.start[0] + "," + e.start[1] + "," + e.end[0] + "," + e.end[1]), a.strokeWeight = i.mark || i.marked ? "2.4" : "1.2", i.noArrow || (a.stroke.EndArrow = "Block"), a.style.cursor = "crosshair", "" !== t && "GooFlow_tmp_line" !== t && (n = document.createElement("div"), a.appendChild(n), r < 0 && (r *= -1), l < 0 && (l *= -1), n.style.left = r + "px", n.style.top = l - 6 + "px", n.style.color = i.fontColor || T.color.lineFont), (i.dash || i.dashed) && (a.stroke.dashStyle = "Dash"), i.mark || i.marked ? a.strokeColor = T.color.mark : a.strokeColor = i.color || T.color.line, a.fillColor = i.color || T.color.line
				}
				return a.setAttribute("from", e.start[0] + "," + e.start[1]), a.setAttribute("to", e.end[0] + "," + e.end[1]), "" !== t && "GooFlow_tmp_line" !== t && (n.style.fontSize = 14 * o + "px", a.style.cursor = "pointer"), a
			},
			_addLineDom: function(t, e) {
				var i, o = this.$nodeData[e.from],
					s = this.$nodeData[e.to];
				if(o && s && (i = e.type && "sl" !== e.type ? d(o, s, e.type, e.M, this.$scale) : l(o, s, this.$scale)))
					if(this.$lineDom[t] = T.prototype._drawLine(t, i, e, this.$scale, e.type), this.$draw.appendChild(this.$lineDom[t]), "" === T.prototype.useSVG)
						if(this.$lineDom[t].childNodes[1].innerHTML = e.name, "sl" !== e.type) {
							var a = i.start[0] > i.end[0] ? i.end[0] : i.start[0];
							a > i.m2[0] && (a = i.m2[0]), a > i.m1[0] && (a = i.m1[0]), this.$lineDom[t].childNodes[1].style.left = (i.m2[0] + i.m1[0]) / 2 - a - this.$lineDom[t].childNodes[1].offsetWidth / 2 + 4, (a = i.start[1] > i.end[1] ? i.end[1] : i.start[1]) > i.m2[1] && (a = i.m2[1]), a > i.m1[1] && (a = i.m1[1]), this.$lineDom[t].childNodes[1].style.top = (i.m2[1] + i.m1[1]) / 2 - a - this.$lineDom[t].childNodes[1].offsetHeight / 2
						} else this.$lineDom[t].childNodes[1].style.left = ((i.end[0] - i.start[0]) * (i.end[0] > i.start[0] ? 1 : -1) - this.$lineDom[t].childNodes[1].offsetWidth) / 2 + 4;
				else this.$lineDom[t].childNodes[2].textContent = e.name
			},
			addLine: function(t, e, i, o, s) {
				if(e.from !== e.to) {
					var a = this.$nodeData[e.from],
						n = this.$nodeData[e.to];
					if(a && n && (!1 === i || "function" != typeof this.onItemAdd || !1 !== this.onItemAdd(t, "line", e))) {
						for(var r in "undefined" == typeof e.dash && (e.dash = !1), this.$lineData)
							if(e.noArrow) {
								if((e.from === this.$lineData[r].from && e.to === this.$lineData[r].to || e.from === this.$lineData[r].to && e.to === this.$lineData[r].from) && e.dash === this.$lineData[r]) return
							} else if(e.from === this.$lineData[r].from && e.to === this.$lineData[r].to && e.dash === this.$lineData[r]) return;
						this.$undoStack && this.$editable && !o && this.pushOper("delLine", [t]), (!(this.$lineData[t] = e).type || "lr" !== e.type && "tb" !== e.type) && (this.$lineData[t].type = "sl"), e.marked || (this.$lineData[t].marked = !1), this._addLineDom(t, this.$lineData[t]), ++this.$lineCount, this.$editable && (this.$lineData[t].alt = !0, this.$deletedItem[t] && delete this.$deletedItem[t]), !s && this.$navMap && this.refreshMap()
					}
				}
			},
			resetLines: function(t, e) {
				for(var i in this.$lineData) {
					var o, s = null;
					if(this.$lineData[i].from === t) {
						if(null == (s = this.$nodeData[this.$lineData[i].to] || null)) continue;
						if(!(o = "sl" === this.$lineData[i].type ? l(e, s, this.$scale) : d(e, s, this.$lineData[i].type, this.$lineData[i].M, this.$scale))) break
					} else if(this.$lineData[i].to === t) {
						if(null == (s = this.$nodeData[this.$lineData[i].from] || null)) continue;
						if(!(o = "sl" === this.$lineData[i].type ? l(s, e, this.$scale) : d(s, e, this.$lineData[i].type, this.$lineData[i].M, this.$scale))) break
					}
					if(null != s)
						if(this.$draw.removeChild(this.$lineDom[i]), this.$lineDom[i] = T.prototype._drawLine(i, o, this.$lineData[i], this.$scale, this.$lineData[i].type), this.$draw.appendChild(this.$lineDom[i]), "" === T.prototype.useSVG)
							if(this.$lineDom[i].childNodes[1].innerHTML = this.$lineData[i].name, "sl" !== this.$lineData[i].type) {
								var a = o.start[0] > o.end[0] ? o.end[0] : o.start[0];
								a > o.m2[0] && (a = o.m2[0]), a > o.m1[0] && (a = o.m1[0]), this.$lineDom[i].childNodes[1].style.left = (o.m2[0] + o.m1[0]) / 2 - a - this.$lineDom[i].childNodes[1].offsetWidth / 2 + 4, (a = o.start[1] > o.end[1] ? o.end[1] : o.start[1]) > o.m2[1] && (a = o.m2[1]), a > o.m1[1] && (a = o.m1[1]), this.$lineDom[i].childNodes[1].style.top = (o.m2[1] + o.m1[1]) / 2 - a - this.$lineDom[i].childNodes[1].offsetHeight / 2 - 4
							} else this.$lineDom[i].childNodes[1].style.left = ((o.end[0] - o.start[0]) * (o.end[0] > o.start[0] ? 1 : -1) - this.$lineDom[i].childNodes[1].offsetWidth) / 2 + 4;
					else this.$lineDom[i].childNodes[2].textContent = this.$lineData[i].name
				}
			},
			setLineType: function(t, e, i) {
				if(!e || null == e || "" === e || e === this.$lineData[t].type) return !1;
				if("function" != typeof this.onLineSetType || !1 !== this.onLineSetType(t, e)) {
					if(this.$undoStack) {
						var o = [t, this.$lineData[t].type, this.$lineData[t].M];
						this.pushOper("setLineType", o)
					}
					var s, a = this.$lineData[t].from,
						n = this.$lineData[t].to;
					if("sl" !== (this.$lineData[t].type = e)) i ? this.setLineM(t, i, !0, !1) : this.setLineM(t, function r(t, e, i, o) {
						return o || (o = 1), "lr" === i ? (t.left * o + t.width * o / 2 + e.left * o + e.width * o / 2) / 2 : "tb" === i ? (t.top * o + t.height * o / 2 + e.top * o + e.height * o / 2) / 2 : void 0
					}(this.$nodeData[a], this.$nodeData[n], e), !0, !1);
					else {
						if(delete this.$lineData[t].M, this.$lineMove.hide().removeData("type").removeData("tid"), !(s = l(this.$nodeData[a], this.$nodeData[n], this.$scale))) return;
						this.$draw.removeChild(this.$lineDom[t]), this.$lineDom[t] = T.prototype._drawLine(t, s, this.$lineData[t], this.$scale, "sl"), this.$draw.appendChild(this.$lineDom[t]), "" === T.prototype.useSVG ? (this.$lineDom[t].childNodes[1].innerHTML = this.$lineData[t].name, this.$lineDom[t].childNodes[1].style.left = ((s.end[0] - s.start[0]) * (s.end[0] > s.start[0] ? 1 : -1) - this.$lineDom[t].childNodes[1].offsetWidth) / 2 + 4) : this.$lineDom[t].childNodes[2].textContent = this.$lineData[t].name
					}
					this.$focus === t && this.focusItem(t), this.$editable && (this.$lineData[t].alt = !0), this.$navMap && this.refreshMap()
				}
			},
			setLineM: function(t, e, i, o, s) {
				if(!this.$lineData[t] || e < 0 || this.$lineData[t].M === e || !this.$lineData[t].type || "sl" === this.$lineData[t].type) return !1;
				if(!1 !== o && "function" == typeof this.onLineMove && !1 === this.onLineMove(t, e)) return !1;
				if(this.$undoStack && !i) {
					var a = [t, this.$lineData[t].M];
					this.pushOper("setLineM", a)
				}
				var n = this.$lineData[t].from,
					r = this.$lineData[t].to;
				this.$lineData[t].M = e;
				var l = d(this.$nodeData[n], this.$nodeData[r], this.$lineData[t].type, this.$lineData[t].M, this.$scale);
				if(this.$draw.removeChild(this.$lineDom[t]), this.$lineDom[t] = T.prototype._drawLine(t, l, this.$lineData[t], this.$scale, this.$lineData[t].type), this.$draw.appendChild(this.$lineDom[t]), "" === T.prototype.useSVG) {
					this.$lineDom[t].childNodes[1].innerHTML = this.$lineData[t].name;
					var h = l.start[0] > l.end[0] ? l.end[0] : l.start[0];
					h > l.m2[0] && (h = l.m2[0]), h > l.m1[0] && (h = l.m1[0]), this.$lineDom[t].childNodes[1].style.left = (l.m2[0] + l.m1[0]) / 2 - h - this.$lineDom[t].childNodes[1].offsetWidth / 2 + 4, (h = l.start[1] > l.end[1] ? l.end[1] : l.start[1]) > l.m2[1] && (h = l.m2[1]), h > l.m1[1] && (h = l.m1[1]), this.$lineDom[t].childNodes[1].style.top = (l.m2[1] + l.m1[1]) / 2 - h - this.$lineDom[t].childNodes[1].offsetHeight / 2 - 4
				} else this.$lineDom[t].childNodes[2].textContent = this.$lineData[t].name;
				this.$editable && (this.$lineData[t].alt = !0), !s && this.$navMap && this.refreshMap()
			},
			delLine: function(t, e, i, o) {
				if(this.$lineData[t] && (!1 === e || "function" != typeof this.onItemDel || !1 !== this.onItemDel(t, "line"))) {
					if(this.$undoStack && !i) {
						var s = [t, this.$lineData[t]];
						this.pushOper("addLine", s)
					}
					this.$draw.removeChild(this.$lineDom[t]), delete this.$lineData[t], delete this.$lineDom[t], this.$focus === t && (this.$focus = ""), --this.$lineCount, this.$editable && (this.$deletedItem[t] = "line", this.$mpFrom.hide().removeData("p"), this.$mpTo.hide().removeData("p")), this.$lineOper && this.$lineOper.hide().removeData("tid"), !o && this.$navMap && this.refreshMap()
				}
			},
			moveLinePoints: function(t, e, i, o) {
				if(e !== i && t && this.$lineData[t]) {
					for(var s in null != e && "" !== e || (e = this.$lineData[t].from), null != i && "" !== i || (i = this.$lineData[t].to), this.$lineData)
						if(e === this.$lineData[s].from && i === this.$lineData[s].to) return;
					if("function" != typeof this.onLinePointMove || !1 !== this.onLinePointMove(t, e, i)) {
						if(this.$undoStack && !o) {
							var a = [t, this.$lineData[t].from, this.$lineData[t].to];
							this.pushOper("moveLinePoints", a)
						}
						null != e && "" !== e && (this.$lineData[t].from = e), null != i && "" !== i && (this.$lineData[t].to = i), this.$draw.removeChild(this.$lineDom[t]), this._addLineDom(t, this.$lineData[t]), this.$editable && (this.$lineData[t].alt = !0), this.$navMap && this.refreshMap()
					}
				}
			},
			loadData: function(t) {
				for(var e in this.clearData(), t.title && this.setTitle(t.title), this.$max = "undefined" == typeof t.initNum ? 1 : t.initNum, t.nodes) this.addNode(e, t.nodes[e], !1, !0, !0);
				for(var i in t.lines) this.addLine(i, t.lines[i], !1, !0, !0);
				if(null != this.$group)
					for(var o in t.areas) this.addArea(o, t.areas[o], !1, !0, !0);
				if(null != this.$paper)
					for(var s in t.memos) this.addMemo(s, t.memos[s], !1, !0, !0);
				this.$deletedItem = {}, this.$extra = t.extra;
				var a = this._buildWorkSize();
				this.$workArea.css({
					height: a.height + "px",
					width: a.width + "px"
				}), "" === T.prototype.useSVG && (this.$draw.coordsize = width + "," + height), this.$navMap && this.refreshMap()
			},
			loadDataAjax: function(o) {
				var e = this;
				C.ajax({
					type: o.type,
					url: o.url + "?" + (new Date).getTime(),
					dataType: "json",
					data: o.data,
					success: function(t) {
						o.dataFilter && o.dataFilter(t, "json"), e.loadData(t), o.success && o.success(t)
					},
					error: function(t, e, i) {
						o.error && o.error(e, i)
					}
				})
			},
			exportData: function() {
				var t = {
					title: this.$title,
					nodes: {},
					lines: {}
				};
				for(var e in t.initNum = this.$max, this.$nodeData) this.$nodeData[e].marked || delete this.$nodeData[e].marked, t.nodes[e] = JSON.parse(JSON.stringify(this.$nodeData[e]));
				for(var i in this.$lineData) this.$lineData[i].marked || delete this.$lineData[i].marked, t.lines[i] = JSON.parse(JSON.stringify(this.$lineData[i]));
				if(null != this.$group)
					for(var o in t.areas = {}, this.$areaData) t.areas[o] = JSON.parse(JSON.stringify(this.$areaData[o]));
				if(null != this.$paper)
					for(var s in t.memos = {}, this.$memoData) t.memos[s] = JSON.parse(JSON.stringify(this.$memoData[s]));
				for(var a in t.extra = {}, this.$extra) t.extra[a] = JSON.parse(JSON.stringify(this.$extra));
				return t
			},
			exportAlter: function() {
				var t = {
					nodes: {},
					lines: {},
					areas: {},
					memos: {}
				};
				for(var e in this.$nodeData) this.$nodeData[e].alt && (t.nodes[e] = this.$nodeData[e]);
				for(var i in this.$lineData) this.$lineData[i].alt && (t.lines[i] = this.$lineData[i]);
				if(null != this.$group)
					for(var o in this.$areaData) this.$areaData[o].alt && (t.areas[o] = this.$areaData[o]);
				if(null != this.$paper)
					for(var s in this.$memoData) this.$memoData[s].alt && (t.memos[s] = this.$memoData[s]);
				return t.deletedItem = this.$deletedItem, t
			},
			transNewId: function(t, e, i) {
				var o;
				switch(i) {
					case "node":
						this.$nodeData[t] && (o = this.$nodeData[t], delete this.$nodeData[t], this.$nodeData[e] = o, o = this.$nodeDom[t].attr("id", e), delete this.$nodeDom[t], this.$nodeDom[e] = o);
						break;
					case "line":
						this.$lineData[t] && (o = this.$lineData[t], delete this.$lineData[t], this.$lineData[e] = o, o = this.$lineDom[t].attr("id", e), delete this.$lineDom[t], this.$lineDom[e] = o);
						break;
					case "area":
						if(this.$areaData[t])
							for(var s in o = this.$areaData[t], delete this.$areaData[t], this.$areaData[e] = o, o = this.$areaDom[t].attr("id", e), delete this.$areaDom[t], this.$areaDom[e] = o, this.$nodeData)(o = this.$nodeData[s]).areaId === t && (this.$nodeData[s].areaId = e);
						break;
					case "memo":
						this.$memoData[t] && (o = this.$memoData[t], delete this.$memoData[t], this.$memoData[e] = o, o = this.$memoDom[t].attr("id", e), delete this.$memoDom[t], this.$memoDom[e] = o)
				}
				t !== this.$focus || "node" !== i && "line" !== i || (this.$focus = e)
			},
			clearData: function() {
				for(var t in this.$nodeData) this.delNode(t, !1, !1, !0);
				for(var e in this.$lineData) this.delLine(e, !1, !1, !0);
				for(var i in this.$areaData) this.delArea(i, !1, !1, !0);
				for(var o in this.$memoData) this.delMemo(o, !1, !1, !0);
				for(var s in this.$extra) delete this.$extra[s];
				this.$max = 1, this.$deletedItem = {}, this.$navMap && this.refreshMap()
			},
			destrory: function() {
				this.$bgDiv.empty(), this.$lineData = null, this.$nodeData = null, this.$lineDom = null, this.$nodeDom = null, this.$lineCount = 0, this.$nodeCount = 0, this.$deletedItem = {}, null != this.$paper && (this.$memoData = null, this.$memoDom = null, this.$memoCount = 0), null != this.$group && (this.$areaData = null, this.$areaDom = null, this.$areaCount = 0), this.$navMap && this.$navMap.empty()
			},
			reinitSize: function(t, e) {
				var i = t || this.$bgDiv.width(),
					o = e || this.$bgDiv.height();
				this.$bgDiv.css({
					height: o + "px",
					width: i + "px"
				});
				var s = 0,
					a = 8;
				null != this.$head && (s = 26, a = 7), null != this.$tool && (this.$tool.css({
					height: o - s - a + "px"
				}), i -= 31), i -= 9, o = o - s - (null != this.$head ? 5 : 8), this.$workArea.width() > i && (i = this.$workArea.width()), this.$workArea.height() > o && (o = this.$workArea.height()), this.$workArea.css({
					height: o + "px",
					width: i + "px"
				}), "" === T.prototype.useSVG && (this.$draw.coordsize = i + "," + o), this.$navMap && this.refreshMap()
			},
			resetScale: function(a) {
				if(a ? a < .5 ? a = .5 : 4 < a && (a = 4) : a = 1, this.$scale !== a) {
					var n = this.$scale / (this.$scale = a),
						r = 0,
						l = 0,
						h = {};
					this.blurItem();
					var t = this._suitSize();
					r = t.width + this.$workExtendStep, l = t.height + this.$workExtendStep, r < this.$workArea.parent().width() && (r = this.$workArea.parent().width()), l < this.$workArea.parent().height() && (l = this.$workArea.parent().height()), this.$workArea.css({
						height: l + "px",
						width: r + "px"
					}), "" === T.prototype.useSVG && (this.$draw.coordsize = r + "," + l);
					var o = this,
						d = -1 < navigator.userAgent.toLowerCase().indexOf("webkit");
					this.$workArea.children(".GooFlow_item").each(function() {
						var t = C(this),
							e = o.getItemInfo(t.attr("id"), "node");
						t.css({
							left: e.left * a + "px",
							top: e.top * a + "px"
						}), o._scaleNode(t, e, d), r = e.width * a, l = e.height * a;
						var i = t.hasClass("item_custom");
						(t = t.children("table")).css({
							width: r - (i ? 0 : 2) + "px",
							height: l - (i ? 0 : 2) + "px"
						})
					});
					var e = 16 * a + 2;
					for(var i in null != this.$group && this.$group.children(".GooFlow_area").each(function() {
							var t = C(this);
							h = t.position(), t.css({
								left: h.left / n + "px",
								top: h.top / n + "px"
							}), t = t.children("div:eq(0)"), r = t.outerWidth() / n, l = t.outerHeight() / n, t.css({
								width: r + "px",
								height: l + "px"
							}), t.next("label").css({
								"font-size": 14 * a + "px",
								left: e + 3 + "px"
							}).next("i").css({
								"font-size": e - 2 + "px",
								width: e + "px",
								height: e + "px",
								"line-height": e + "px"
							})
						}), null != this.$paper && this.$paper.children(".GooFlow_memo").each(function() {
							var t = C(this),
								e = 12 * a;
							h = t.position(), t.css({
								left: h.left / n + "px",
								top: h.top / n + "px"
							}), t = t.children("div:eq(0)"), r = t.outerWidth() / n, l = t.outerHeight() / n, t.css({
								width: r + "px",
								height: l + "px"
							}), t.css({
								padding: 9 * a + "px"
							}).children().css({
								"font-size": 12 * a + "px"
							});
							var i = {};
							if(e < 12 && d) {
								i.transform = "scale(" + e / 12 + ")";
								var o = (r - r * a) / 2,
									s = (l - l * a) / 2;
								i.margin = -s + "px " + -o + "px"
							} else i.transform = "none", i["min-height"] = 34 * a + "px", i.margin = "0px";
							t.children().css(i)
						}), this.$lineDom) this.$draw.removeChild(this.$lineDom[i]), delete this.$lineDom[i];
					for(var s in this.$lineData) this._addLineDom(s, this.$lineData[s]);
					this.$navMap && this.refreshMap(), "undefined" == typeof this._tmpScaleValue && (this._tmpScaleValue = C('<div id="' + this.$id + '_scaleValue" style="width:360px;height:120px;line-height:100%;position:absolute;margin:-60px 0 0 -' + (180 - (null == this.$tool ? 0 : this.$tool.width())) + 'px;top:50%;left:50%;text-align:center;font-weight:bold;color:rgba(0,0,0,.1);font-size:120px !important;"></div>'), this.$bgDiv.append(this._tmpScaleValue)), this._tmpScaleValue.show().text(Math.round(1e4 * this.$scale) / 100 + "%"), this._tmpTimeout && (clearTimeout(this._tmpTimeout), delete this._tmpTimeout);
					var c = this;
					this._tmpTimeout = setTimeout(function() {
						c._tmpScaleValue.hide()
					}, 600)
				}
			}
		}, T.extend = function(t) {
			for(var e in t) T.prototype[e] = t[e]
		}, T.init = function(t, e) {
			return new T(t, e)
		}, T.setColors = function(t) {
			C.extend(T.color, t)
		}, C.extend({
			createGooFlow: function(t, e) {
				return new T(t, e)
			}
		}), T
	});